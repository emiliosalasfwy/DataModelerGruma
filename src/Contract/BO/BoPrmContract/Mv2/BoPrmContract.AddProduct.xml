<BusinessLogic methodName="addProduct" businessObjectClass="BoPrmContract" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="productPKey" type="String" />
    <MethodInput name="productId" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[// determine if product exists already
var promise;
var loProducts = me.getLoPrmCttProducts();
var existingProducts = loProducts.getItemsByParam({"referencePKey": productPKey});
var liProduct;
if (existingProducts.length > 0)
{
  for (var index in existingProducts) 
  {
    if ((existingProducts[index].getObjectStatus() & STATE.DELETED) === 0)
    {
      liProduct = existingProducts[index];
    }
  }
}

if(!Utils.isDefined(liProduct))
{
  promise = BoFactory.loadObjectByParamsAsync("LuProduct", me.getQueryBy('pKey', productPKey)).then(
    function(luProduct) {
      var pKey = PKey.next();
      var liProduct = {
        "pKey": pKey,
        "prmContractPKey": me.getPKey(),
        "prdProductGroupName": luProduct.getGroupShortText(),
        "text": luProduct.getText1(),
        "quantity": 0,
        "specialPrice": 0,
        "discount": 0,
        "dataType": "Decimal",
        "formatType": "0.1",
        "maxValue": "100.0",
        "minValue": "0.0",
        "stepSize": "0",
        "productId": productId,
        "prdgroupId": luProduct.getGroupId(),
        "groupFlag": " ",
        "referencePKey": luProduct.getPKey(),
        "prdMetaType": "Product",
        "manual": "1",
        "objectStatus": STATE.NEW | STATE.DIRTY
      };

      me.getLoPrmCttProducts().addListItems([liProduct]);
      me.getLoPrmCttProducts().sortList();
      me.getLoPrmCttProducts().setCurrentByPKey(pKey);
      me.getLuPrmCttTacticProductCount().setProductCount(me.getLuPrmCttTacticProductCount().getProductCount() + 1); // SF/CASDIFF: set and validate does not exist in CGCloud
    }
  );
}
else
{
  loProducts.setCurrent(liProduct);
  promise = when.resolve();
}]]>
</Code>
  <Return name="result" value="promise" />
</BusinessLogic>