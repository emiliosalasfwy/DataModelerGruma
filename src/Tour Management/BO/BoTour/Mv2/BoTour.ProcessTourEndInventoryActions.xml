<BusinessLogic methodName="processTourEndInventoryActions" businessObjectClass="BoTour" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters />
<Code language="JavaScript">
<![CDATA[var jsonQuery = {};
jsonQuery.params = [
  { "field" : "tmgMainPKey", "value" : me.getPKey() },
  { "field" : "tmgTourObjectRelUsage", "value" : "'SdoMeta.TransferTourEnd'" }
];

var inventoryActions = function(objRel){
  var sdoMetaPKey = objRel.getPKey();

  return BoFactory.createObjectAsync("BoTruckLoad", {"sdoMetaPKey" : sdoMetaPKey, "etpWarehouasePKey" : me.getEndEtpWarehousePKey(), "tmgMainPKey" : me.getPKey()}).then(
    function(bo){
      if(Utils.isDefined(bo)){
        ApplicationContext.set('currentTourStatus', 'Running');
        me.setBoTruckLoad(bo);
        return bo.addItemsBasedOnInventory().then(
          function(){
            return bo.cpInitComplexPricing();
          }
        ).then(
          function(){
            return bo.processInventoryActions();
          }
        ).then(
          function(){
            ApplicationContext.set('currentTourStatus', '');
          }
        );
      }
    }
  );
};

var promise = BoFactory.loadObjectByParamsAsync("LoTruckLoadTemplates", jsonQuery).then(
  function(result){
    if(Utils.isDefined(result) && result.getAllItems().length > 0){
      var deferreds = []; 

      for(var i = 0; i < result.getAllItems().length; i++){
        deferreds.push(inventoryActions(result.getAllItems()[i]));
      }

      return when.all(deferreds);
    }
  }
);]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>