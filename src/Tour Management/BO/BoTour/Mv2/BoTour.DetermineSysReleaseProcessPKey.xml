<BusinessLogic methodName="determineSysReleaseProcessPKey" businessObjectClass="BoTour" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="phaseFilter" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise;
var usage = " ";
var sysReleaseProcessPKey = " ";

if (Utils.isDefined(phaseFilter) && phaseFilter == "Running") {
  usage="TmgMain.StartOfDay";
}
if (Utils.isDefined(phaseFilter) && phaseFilter == "Completed") {
  usage="TmgMain.EndOfDay";
}

if(me.getObjectStatus() === this.self.STATE_NEW_DIRTY) {
  var objectRelRelation = me.getLoTmgTourObjectRelations().getAllItems().find(function (item) {
    return item.objectMetaPKey === " " && item.getUsage() === usage;
  });

  sysReleaseProcessPKey = objectRelRelation ? objectRelRelation.sysReleaseProcessPKey : " ";
  me.setSysReleaseProcessPKey(sysReleaseProcessPKey);
  promise = when.resolve(sysReleaseProcessPKey);
}
else {
  var jsonQuery = {};
  jsonQuery.params =
    [{"field" : "tmgTourPKey", "value" : me.getPKey()},
     {"field" : "objectMetaPKey", "value" : " "},
     {"field" : "usage", "value" : usage}];

  promise = BoFactory.loadObjectByParamsAsync("LuTourObjectRelInformation", jsonQuery).then(
    function(luTourObjectRelInformation) {
      if(Utils.isDefined(luTourObjectRelInformation)){
        sysReleaseProcessPKey = luTourObjectRelInformation.getSysReleaseProcessPKey();
      }
      me.setSysReleaseProcessPKey(sysReleaseProcessPKey);
      return sysReleaseProcessPKey;
    });
}]]>
</Code>
  <Return name="result" value="promise" />
</BusinessLogic>