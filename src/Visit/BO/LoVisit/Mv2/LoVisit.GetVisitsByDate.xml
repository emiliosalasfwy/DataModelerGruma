<BusinessLogic methodName="getVisitsByDate" businessObjectClass="LoVisit" businessObjectType="listobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="currentDateStart" type="Date" />
    <MethodInput name="currentDateEnd" type="Date" />
    <MethodInput name="dateFunction" type="String" />
    <MethodInput name="filterVisits" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var plannedStartDate;
var plannedEndDate;
var jsonQuery = {};
var jsonParams = [];

var dateDefer = when.resolve();


if (dateFunction.toUpperCase() === "NEXTDAY") {
  plannedStartDate = Utils.convertAnsiDate2Date(currentDateStart);
  plannedEndDate = Utils.convertAnsiDate2Date(currentDateEnd);
  plannedStartDate.setDate(plannedStartDate.getDate() + 1);
  plannedEndDate.setDate(plannedEndDate.getDate() + 1);
} 
else if (dateFunction.toUpperCase() === "PREVDAY") {
  plannedStartDate = Utils.convertAnsiDate2Date(currentDateStart);
  plannedEndDate = Utils.convertAnsiDate2Date(currentDateEnd);
  plannedStartDate.setDate(plannedStartDate.getDate() - 1);
  plannedEndDate.setDate(plannedEndDate.getDate() - 1);
} 
else{
  plannedStartDate = Utils.convertAnsiDate2Date(currentDateStart);
  plannedEndDate = Utils.convertAnsiDate2Date(currentDateEnd);
}

var currentDate;
var promise = dateDefer.then(
  function() {
    plannedStartDate.setHours(0, 0, 0, 0);
    plannedEndDate.setHours(0, 0, 0, 0);

    currentDate = plannedStartDate;

    if (filterVisits !== "All") {
      jsonParams.push({
        "field" : "VisitStatus",
        "operator" : "EQ",
        "value" : (filterVisits == "Open") ? "'Planned','InProgress'" : filterVisits
      });
    }


    jsonParams.push({
      "field" : "plannedStartDate",
      "operator" : "EQ",
      "value" : plannedStartDate
    });
    jsonParams.push({
      "field" : "plannedEndDate",
      "operator" : "EQ",
      "value" : plannedEndDate
    });
    jsonQuery.params = jsonParams;

    /** return BoFactory.loadObjectByParamsAsync("LuCurrentAddress", {});
  }).then(function(luCurrentAddress) {
  jsonQuery.params.push({ "field": "currentLatitude", "value": luCurrentAddress.latitude });
  jsonQuery.params.push({ "field": "currentLongitude", "value": luCurrentAddress.longitude });       **/     
    return Facade.getListAsync("LoVisit", jsonQuery);    
  }).then(function (list) {
  me.suspendListRefresh();
  me.removeAllItems();


  var loadParams;
  var prepend = false;
  var noItemSelectedEvent = true;
  var markerIdx = 1;
  me.addItems(list, loadParams, prepend, noItemSelectedEvent);
  me.orderBy({"plannedStartDate": "ASC"});

  me.forEach(function(visit) {
    if (markerIdx > 23) {
      visit.setMapPinImage("BlueGoogleMarkerEmpty");
    } else {
      visit.setMapPinImage("BlueGoogleMarker" + markerIdx);
    }
    visit.setMapPinId(markerIdx);
    markerIdx++;  
    visit.setToolTipText("<b>" + visit.getVisitName() + "</b>"); 
    visit.setVisibleInMap("1"); 

    //Address Handling
    var combinedVisitAddress = "";
    if(!Utils.isEmptyString(visit.getStreet()) || !Utils.isEmptyString(visit.getCity()) ) {

      if(!Utils.isEmptyString(visit.getStreet())) {
        combinedVisitAddress = combinedVisitAddress + visit.getStreet();
      }

      if(!Utils.isEmptyString(visit.getCity())) {
        if(!Utils.isEmptyString(combinedVisitAddress) ) {
          combinedVisitAddress += ", ";
        }
        combinedVisitAddress = combinedVisitAddress + visit.getCity();
      }
    } 
    visit.setCombinedAddress(combinedVisitAddress);
    
    //Date Handling
    visit.setPlannedStartDate(Utils.convertAnsiDateTime2AnsiDate(visit.getPlannedStartDateTime()));
    visit.setPlannedStartTime(visit.getPlannedStartDateTime().substring(11,16));
    visit.setPlannedEndDate(Utils.convertAnsiDateTime2AnsiDate(visit.getPlannedEndDateTime()));
    visit.setPlannedEndTime(visit.getPlannedEndDateTime().substring(11,16));
    
    visit.setObjectStatus(STATE.PERSISTED);


      

  });

  me.resumeListRefresh();  
  return Utils.convertDate2Ansi(currentDate);
});]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>