<BusinessLogic methodName="onPrimaryKPIItemChanged" businessObjectClass="BoVisitAssessmentTask" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="handlerParams" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise = when.resolve();

for (var i = 0; i < handlerParams.modified.length; i++) {
  switch (handlerParams.modified[i]) {
    case "actualValue":

      var valueInvalid = false;

      if(handlerParams.listItem.getAidDataType() === "String" && Utils.isDefined(handlerParams.newValues.actualValue) ){

        if(handlerParams.newValues.actualValue.length > 1000){
          valueInvalid = true;
          var messageCollector = new MessageCollector();

          var error = {
            "level" : "error",
            "objectClass" : "BoVisitAssessmentTask",
            "messageParams":{"processContextValue": handlerParams.listItem.getQuestion() },
            "messageID" : "ValidationMessageInvalidData"
          }; 
          messageCollector.add(error);
          me.getLoRetailVisitKPI().suspendListRefresh();
          handlerParams.listItem.setActualValue(handlerParams.newValues.actualValue.substring(0,1000));
          me.getLoRetailVisitKPI().resumeListRefresh(true);

          var buttonValues = {};
          buttonValues[Localization.resolve("Back")] = "back";
          var messages = messageCollector.getMessages().join("<br>");
          promise = MessageBox.displayMessage(Localization.resolve("MessageBox_Title_Validation"), messages, buttonValues)
            .then(function(result){
            messageCollector.destroy();
          });

        } else{
          promise = when.resolve("valid");
        }
      }

      if(!valueInvalid){
        var relatedList = me.getLoRetailVisitKPI();
        var relatedItem = relatedList.getItemByPKey(handlerParams.listItem.getPKey());

        if(handlerParams.newValues.actualValue !== relatedItem.getActualValue()){
          me.getLoRetailVisitKPI().suspendListRefresh();
          relatedItem.setActualValue(handlerParams.newValues.actualValue);
          me.getLoRetailVisitKPI().resumeListRefresh(true);
        }
      }

      break;
  }
}]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>