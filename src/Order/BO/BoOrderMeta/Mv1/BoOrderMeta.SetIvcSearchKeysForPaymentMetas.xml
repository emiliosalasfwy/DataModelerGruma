<BusinessLogic methodName="setIvcSearchKeysForPaymentMetas" businessObjectClass="BoOrderMeta" businessObjectType="businessobject" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="payerPKey" type="DomPKey" />
    <MethodInput name="ivcRef1PKey" type="DomPKey" />
    <MethodInput name="ivcRef2PKey" type="DomPKey" />
    <MethodInput name="ivcRef3PKey" type="DomPKey" />
    <MethodInput name="ivcRef4PKey" type="DomPKey" />
    <MethodInput name="ivcRef5PKey" type="DomPKey" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var loInventoryByPaymentMeta = this.getLoInventoryMetaByPaymentMeta().getItemObjects();
var liInventoryMetaByPaymentMeta;

var actualUsrPKey = " ";
var defaultUsrPKey = " ";
var tmgTourPKey = " ";
var defaultEtpVehiclePKey = " ";
var actualEtpVehiclePKey = " ";

for (var i = 0; i < loInventoryByPaymentMeta.length; i++) {
  liInventoryMetaByPaymentMeta = loInventoryByPaymentMeta[i];

  // Check reference PKey usage and use for this transaction template and collect relevant PKeys to set below
  if (!Utils.isEmptyString(this.getIvcRefPKey1Usage()) && (liInventoryMetaByPaymentMeta.getUseIvcRefPKey1() == "1")) {
    if (this.getIvcRefPKey1Usage() == "DefaultUsr") {
      defaultUsrPKey = ivcRef1PKey;
    } else if (this.getIvcRefPKey1Usage() == "ActualUsr") {
      actualUsrPKey = ivcRef1PKey;
    } else if (this.getIvcRefPKey1Usage() == "Tour") {
      tmgTourPKey = ivcRef1PKey;
    } else if (this.getIvcRefPKey1Usage() == "DefaultVehicle") {
      defaultEtpVehiclePKey = ivcRef1PKey;
    } else if (this.getIvcRefPKey1Usage() == "ActualVehicle") {
      actualEtpVehiclePKey = ivcRef1PKey;
    }
  }

  if (!Utils.isEmptyString(this.getIvcRefPKey2Usage()) && (liInventoryMetaByPaymentMeta.getUseIvcRefPKey2() == "1")) {
    if (this.getIvcRefPKey2Usage() == "DefaultUsr") {
      defaultUsrPKey = ivcRef2PKey;
    } else if (this.getIvcRefPKey2Usage() == "ActualUsr") {
      actualUsrPKey = ivcRef2PKey;
    } else if (this.getIvcRefPKey2Usage() == "Tour") {
      tmgTourPKey = ivcRef2PKey;
    } else if (this.getIvcRefPKey2Usage() == "DefaultVehicle") {
      defaultEtpVehiclePKey = ivcRef2PKey;
    } else if (this.getIvcRefPKey2Usage() == "ActualVehicle") {
      actualEtpVehiclePKey = ivcRef2PKey;
    }
  }

  if (!Utils.isEmptyString(this.getIvcRefPKey3Usage()) && (liInventoryMetaByPaymentMeta.getUseIvcRefPKey3() == "1")) {
    if (this.getIvcRefPKey3Usage() == "DefaultUsr") {
      defaultUsrPKey = ivcRef3PKey;
    } else if (this.getIvcRefPKey3Usage() == "ActualUsr") {
      actualUsrPKey = ivcRef3PKey;
    } else if (this.getIvcRefPKey3Usage() == "Tour") {
      tmgTourPKey = ivcRef3PKey;
    } else if (this.getIvcRefPKey3Usage() == "DefaultVehicle") {
      defaultEtpVehiclePKey = ivcRef3PKey;
    } else if (this.getIvcRefPKey3Usage() == "ActualVehicle") {
      actualEtpVehiclePKey = ivcRef3PKey;
    }
  }

  if (!Utils.isEmptyString(this.getIvcRefPKey4Usage()) && (liInventoryMetaByPaymentMeta.getUseIvcRefPKey4() == "1")) {
    if (this.getIvcRefPKey4Usage() == "DefaultUsr") {
      defaultUsrPKey = ivcRef4PKey;
    } else if (this.getIvcRefPKey4Usage() == "ActualUsr") {
      actualUsrPKey = ivcRef4PKey;
    } else if (this.getIvcRefPKey4Usage() == "Tour") {
      tmgTourPKey = ivcRef4PKey;
    } else if (this.getIvcRefPKey4Usage() == "DefaultVehicle") {
      defaultEtpVehiclePKey = ivcRef4PKey;
    } else if (this.getIvcRefPKey4Usage() == "ActualVehicle") {
      actualEtpVehiclePKey = ivcRef4PKey;
    }
  }

  if (!Utils.isEmptyString(this.getIvcRefPKey5Usage()) && (liInventoryMetaByPaymentMeta.getUseIvcRefPKey5() == "1")) {
    if (this.getIvcRefPKey5Usage() == "DefaultUsr") {
      defaultUsrPKey = ivcRef5PKey;
    } else if (this.getIvcRefPKey5Usage() == "ActualUsr") {
      actualUsrPKey = ivcRef5PKey;
    } else if (this.getIvcRefPKey5Usage() == "Tour") {
      tmgTourPKey = ivcRef5PKey;
    } else if (this.getIvcRefPKey5Usage() == "DefaultVehicle") {
      defaultEtpVehiclePKey = ivcRef5PKey;
    } else if (this.getIvcRefPKey5Usage() == "ActualVehicle") {
      actualEtpVehiclePKey = ivcRef5PKey;
    }
  }

  // Set UsrMainPKey
  if (liInventoryMetaByPaymentMeta.getUsrPolicy() == "One") {
    if ((Utils.isEmptyString(defaultUsrPKey) && Utils.isEmptyString(actualUsrPKey)) || (!Utils.isEmptyString(defaultUsrPKey) && !Utils.isEmptyString(actualUsrPKey))) {
      //Both references for UsrMainPKey are set and marked for usage. Throw error.
      //TODO throw error "Template not configured correctly"
    } 
    else {
      if (!Utils.isEmptyString(defaultUsrPKey)) {
        liInventoryMetaByPaymentMeta.setUsrMainPKey(defaultUsrPKey);
      } else if (!Utils.isEmptyString(actualUsrPKey)) {
        liInventoryMetaByPaymentMeta.setUsrMainPKey(actualUsrPKey);
      }
    }
  }

  if (!Utils.isSfBackend()) {
    // Set EtpVehiclePKey
    if (liInventoryMetaByPaymentMeta.getVehiclePolicy() == "One") {
      if ((Utils.isEmptyString(defaultEtpVehiclePKey) && Utils.isEmptyString(actualEtpVehiclePKey)) || (!Utils.isEmptyString(defaultEtpVehiclePKey) && !Utils.isEmptyString(actualEtpVehiclePKey))) {
        //Both references for EtpVehiclePKey are set and marked for usage. Throw error.
        //TODO throw error "Template not configured correctly"
      } else {
        if (!Utils.isEmptyString(defaultEtpVehiclePKey)) {
          liInventoryMetaByPaymentMeta.setEtpVehiclePKey(defaultEtpVehiclePKey);
        } else if (!Utils.isEmptyString(actualEtpVehiclePKey)) {
          liInventoryMetaByPaymentMeta.setEtpVehiclePKey(actualEtpVehiclePKey);
        }
      }
    }
    // Set BpaMainPKey
    if (liInventoryMetaByPaymentMeta.getBpaPolicy() == "One") {
      liInventoryMetaByPaymentMeta.setBpaMainPKey(payerPKey);
    }
    // Set TmgTourPKey
    if (liInventoryMetaByPaymentMeta.getTmgPolicy() == "One") {
      liInventoryMetaByPaymentMeta.setTmgTourPKey(tmgTourPKey);
    }
  }
}]]>
</Code>
  <Return name="" value="" />
</BusinessLogic>