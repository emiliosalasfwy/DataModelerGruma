<BusinessLogic methodName="determineSatisfiedRewardGroups" businessObjectClass="BoHurdleEvaluationHelper" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="promotionPKey" type="String" />
    <MethodInput name="loSelectablePromotion" type="Object" />
  </Parameters>
  <Code language="JavaScript"><![CDATA[var rewardGroup = Utils.createDictionary();
var rewardGroupId;
var hurdleIsFulfilled;
var groupHurdles;
var total = 0;
var count = 0;
var rewards;
var promotionPKeyFromRewards;
var selectablePromotion;
var promise = when.resolve();
var deferreds = [];
var x;

loSelectablePromotion.getAllItems().forEach(function(item) {
  item.setSatisfiedRewardGroupCount(0);
});

var loRewardGroups = me.getLoRewardGroups().getItems();
for(x = 0; x < loRewardGroups.length; x++) {
  rewardGroupId = loRewardGroups[x].getPKey();

  if (Utils.isEmptyString(promotionPKey)) {
    groupHurdles = me.getLoHurdles().getItemsByParamArray([{"hurdleType": "RewardSpecific", "op":"NE"}, {"rewardGroupId": rewardGroupId, "op":"EQ"}, {"operation": " ", "op":"NE"}]);
  }
  else {
    groupHurdles = me.getLoHurdles().getItemsByParamArray([{"promotionPKey": promotionPKey,"op":"EQ"}, {"hurdleType": "RewardSpecific", "op":"NE"}, {"rewardGroupId": rewardGroupId, "op":"EQ"}, {"operation": " ", "op":"NE"}]);
  }

  if(groupHurdles.length === 0) {
    //When no hurdle or only reward specific hurdle is assigned to a reward group then reward group should be satisfied
    if (!rewardGroup.containsKey(rewardGroupId)) {
      rewardGroup.add(rewardGroupId, true);
    }
  } else {
    for (var i = 0; i < groupHurdles.length; i++) {
      hurdleIsFulfilled = true;
      if (groupHurdles[i].getIsFulfilled() == '0') {
        hurdleIsFulfilled = false;
      }
      rewardGroupId = groupHurdles[i].getRewardGroupId();
      if (!rewardGroup.containsKey(rewardGroupId)) {
        rewardGroup.add(rewardGroupId, hurdleIsFulfilled);
      }
      else {
        var fulfilledHurdle;
        if(groupHurdles[i].getOperation() == "AND") {
          fulfilledHurdle = rewardGroup.get(rewardGroupId) && hurdleIsFulfilled ;
        }
        else if(groupHurdles[i].getOperation() == "OR") {
          fulfilledHurdle = rewardGroup.get(rewardGroupId) || hurdleIsFulfilled ;
        }
        rewardGroup.data[rewardGroupId] = fulfilledHurdle;
      }
    }
  }
}

for (var key in rewardGroup.data) {
  rewards = me.getLoRewards().getItemsByParam({'rewardGroupId': key});
  for(x = 0; x < rewards.length; x++ ) {
    if(rewardGroup.get(key)) {
      if(!Utils.isEmptyString(rewards[x].getHurdlePKey())) {
        deferreds.push(me.evaluateHurdles(me.orderCache, me.orderCache.getBoItemTabManager().getBoCallCache(),promotionPKey,rewards[x]));
      }
      else {
        deferreds.push(rewards[x].setIsReadyToBeApplicable('1'));
      }
      promotionPKeyFromRewards = rewards[x].getPromotionPKey();
    }
    else {
      deferreds.push(rewards[x].setIsReadyToBeApplicable('0'));
    }
  }
}
promise = when.all(deferreds).then(function(){
  var rewardSelectionDeferreds = [];
  for (var key in rewardGroup.data) {
    var currentRewardGroup = me.getLoRewardGroups().getItemByPKey(key);
    if(rewardGroup.get(key)) {
      var multiplicity = currentRewardGroup.getMultiplicity();
      rewardSelectionDeferreds.push(me.handleRewardSelection(key,multiplicity, ""));

      if (Utils.isEmptyString(promotionPKey)) {
        selectablePromotion = loSelectablePromotion.getItemByPKey(promotionPKeyFromRewards);
      }
      else {
        selectablePromotion = loSelectablePromotion.getItemByPKey(promotionPKey);
      }
      if(Utils.isDefined(selectablePromotion)){
        selectablePromotion.setSatisfiedRewardGroupCount(selectablePromotion.getSatisfiedRewardGroupCount() + 1);
      }
      currentRewardGroup.setRewardSectionText(Localization.resolve("ChooseYourReward"));
      currentRewardGroup.setHeaderBackgroundColor("Approve_Background");
    } else {
      currentRewardGroup.setRewardSectionText(Localization.resolve("RewardsId"));
      currentRewardGroup.setHeaderBackgroundColor("Reject_Background");
    }
  }
  return when.all(rewardSelectionDeferreds);
}).then(function(){
  var deferreds2 = [];
  var rewards = me.getLoRewards().getAllItems();

  for(x = 0; x < rewards.length; x++) {
    var currentReward = rewards[x];
    var rewardType = currentReward.getRewardType();

    if(currentReward.getIsReadyToBeApplicable() === "1" && currentReward.getIsApplicable() === "0"){
      currentReward.setIsApplicable("1");
      currentReward.setEditable(true);
      if(rewardType === "FreeItem"){
        currentReward.setShowButton(true);
        currentReward.setButtonText(Localization.resolve("SelectProducts"));
      }
      //update reward selection flag on ui when reward is selected and applicable
      if(currentReward.getSelected() === "1"){
        currentReward.setIsSelectedOnUI("1");
      }
    }

    if(currentReward.getIsReadyToBeApplicable() === "0" && currentReward.getIsApplicable() === "1"){
      currentReward.setIsApplicable("0");
      currentReward.setEditable(false);
      currentReward.setShowButton(false);
      currentReward.setButtonText("");
    }

    //remove free items from non-applicable free item rewards on re-opening order
    if(currentReward.getIsReadyToBeApplicable() === "0" && rewardType === "FreeItem"){
      deferreds2.push(me.getOrderCache().handleFreeItemsFromReward(currentReward.getPKey(), false));
    }
  }

  me.getLoRewards().generateProductsCounterStringForReward(me.getLoRewardProducts());
  if(Utils.isDefined(me.getLoRewards().getCurrent())){
    me.loadRelevantRewardProducts(me.getLoRewards().getCurrent().getPKey());
  }

  return when.all(deferreds2);
});]]></Code>
  <Return name="promise" value="promise" />
</BusinessLogic>