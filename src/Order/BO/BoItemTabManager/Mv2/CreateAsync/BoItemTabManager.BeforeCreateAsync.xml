<BusinessLogic methodName="beforeCreateAsync" businessObjectClass="BoItemTabManager" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="context" type="Object" />
  </Parameters>
  <Code language="JavaScript"><![CDATA[if (me.beforeInitialize) {
  me.beforeInitialize.apply(me, [context]);
}

me.updateProperties(context.jsonQuery);

if (me.afterInitialize) {
  me.afterInitialize.apply(me, [context]);
}

// Create dictionary
me.setLoadedLevels(Utils.createDictionary());

// Initialize currently displayed hierarchy level    
var levels = me.getNumberOfLevels();
var values = [];

for (var i=0; i < levels; i++) {
  values.push("");
}

me.setLastDisplayedHierarchyLevel({"fieldName" : "id", "values" : values});

// Initialize current item filter id
me.setCurrentItemFilterId("All");

me.setResetCurrentItemFilterOnShowProducts("1");

// Initialize list objects that are empty at the beginning (no item selected)
var promise = BoFactory.createListAsync("LoPromotionsForProduct", {})
.then(
  function (loPromotionsForProduct) {
    me.setLoPromotionsForCurrentProduct(loPromotionsForProduct);

    if (me.getIsShowCategories() == "1") { 
      context.jsonQuery.params.push({ "field" : "criterionAttribute", "value" : me.getCriterionAttribute_Level1(), "operator" : "EQ" });        
      return BoFactory.loadListAsync(LO_BREADCRUMBLEVEL1, context.jsonQuery);
    } 
  }).then(
  function (loBreadCrumbLevel1) {
    if (Utils.isDefined(loBreadCrumbLevel1)) {
      me.setLoBreadCrumbLevel1(loBreadCrumbLevel1);
      if (me['setObjectStatus'] ) {
        me.setObjectStatus(this.self.STATE_NEW);
      }
    }
    return me;
  });]]></Code>
  <Return name="context" value="promise" />
</BusinessLogic>