<BusinessLogic methodName="setItemFilterCounts" businessObjectClass="BoOrder" businessObjectType="" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters />
<Code language="JavaScript">
<![CDATA[var orderItems = me.getLoItems().getAllItems();
var orderItem;
var filter = me.getLoItemFilter().getItems();
var countAll = 0;
var countPromoted = 0;
var countNew = 0;
var countHistoric = 0;
var countOutOfStock = 0;
var countBasket = 0;
var consideredInBasketCount = {};
var alreadyCountedItem = {};
var i;

for (i=0; i < orderItems.length; i++) {
  orderItem = orderItems[i];
  if ((orderItem.getQuantity() > 0 || Utils.isEmptyString(orderItem.getPromotionPKey())) && !Utils.isDefined(alreadyCountedItem[orderItem.getRefPKey()])) {
    //Count items per category for itemfilter
    if (orderItem.getDeletedFreeItem() === "0") {
      countAll++;
      alreadyCountedItem[orderItem.getRefPKey()] = "";
    }
    if (orderItem.getPromoted() == "1") {
      countPromoted++;
      alreadyCountedItem[orderItem.getRefPKey()] = "";
    }
    if (orderItem.getNewState() === "Available") {
      countNew++;
      alreadyCountedItem[orderItem.getRefPKey()] = "";
    }
    if (orderItem.getHistory() == "1") {
      countHistoric++;
      alreadyCountedItem[orderItem.getRefPKey()] = "";
    }
    if (orderItem.getOutOfStock() == "1") {
      countOutOfStock++;
      alreadyCountedItem[orderItem.getRefPKey()] = "";
    }
  }
  if(orderItem.getQuantity() > 0 && !Utils.isDefined(consideredInBasketCount[orderItem.getRefPKey()])) {
    countBasket++;
    consideredInBasketCount[orderItem.getRefPKey()] = "";
  }
}

//Set count values of itemfilter
for (i = 0; i < filter.length; i++){
  switch (filter[i].getFilterCode()){
    case "All":
      filter[i].setCount(countAll);
      break;
    case "Promotion":
      filter[i].setCount(countPromoted);
      break;
    case "New":
      filter[i].setCount(countNew);
      break;
    case "History":
      filter[i].setCount(countHistoric);
      break;
    case "OutOfStock":
      filter[i].setCount(countOutOfStock);
      break;
    case "Basket":
      filter[i].setCount(countBasket + "/" + me.getTotalValue().toFixed(2));
      break;
  }
}]]>
</Code>
  <Return name="" value="" />
</BusinessLogic>