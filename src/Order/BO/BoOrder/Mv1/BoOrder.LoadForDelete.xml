<BusinessLogic methodName="loadForDelete" businessObjectClass="BoOrder" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="jsonQuery" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise = Facade.getObjectAsync(BO_ORDER, jsonQuery)
.then(function (selfJson) {
  me.setProperties(selfJson);
  return Facade.getListAsync("LoOrderItems", me.getQueryBy("orderPkey", me.getPKey()));
})
.then(function (loOrderItemsJson) {
  me.setLoItems(BoFactory.instantiate("LoOrderItems"));
  me.getLoItems().addItems(loOrderItemsJson);
  me.getLoItems().setObjectStatus(STATE.PERSISTED);

  return BoFactory.loadListAsync("LoOrderAttachment", me.getQueryBy("sdoMainPKey", me.getPKey()));
})
.then(function (attachment) {
  me.setLoOrderAttachment(attachment);

  return BoFactory.loadObjectByParamsAsync(BO_ORDERMETA, me.getQueryBy("pKey", me.getSdoMetaPKey()));
})
.then(function (boOrderMeta) {
  me.setBoOrderMeta(boOrderMeta);

  return BoFactory.loadObjectByParamsAsync("LoOrderPayments", me.getQueryBy("sdoMainPKey", me.getPKey()));
})
.then(function (loOrderPayments){
  var jsonParamsForTransactions = [];
  var jsonQueryForTransactions = {};
  if (Utils.isDefined(loOrderPayments))  {
    me.setLoPayments(loOrderPayments);

    var orderPayments = me.getLoPayments().getItems();
    var orderPaymentPkeys = orderPayments.map(function(item){return item.getPKey();});

    jsonParamsForTransactions.push({
      "field" : "orderPaymentPkeys",
      "value" : "'" + orderPaymentPkeys.join("','") + "'"
    });
  }
  if (Utils.isDefined(me.getLoItems()))  {
    var orderItems = me.getLoItems().getItems();
    var orderItemPkeys = orderItems.map(function(item){return item.getPKey();});

    jsonParamsForTransactions.push({
      "field" : "orderItemPkeys",
      "value" : "'" + orderItemPkeys.join("','") + "'"
    });
  }
  if (Utils.isDefined(me.getLoItems())  || Utils.isDefined(loOrderPayments))  {
    jsonQueryForTransactions.params = jsonParamsForTransactions;
    return Facade.getListAsync("LoInventoryTransaction",jsonQueryForTransactions);
  }
}).
then(function (loInventoryTransaction){
  if(Utils.isDefined(loInventoryTransaction)){
    me.setLoInventoryTransactions(BoFactory.instantiateLightweightList("LoInventoryTransaction"));
    me.getLoInventoryTransactions().addItems(loInventoryTransaction);
    me.getLoInventoryTransactions().setObjectStatus(STATE.PERSISTED);
  }
  return BoFactory.loadObjectByParamsAsync("LoSysSignatureBlob", me.getQueryBy("referencePKey", me.getPKey()));
})
.then(function (LoSysSignatureBlob){
  if (Utils.isDefined(LoSysSignatureBlob))  {
    me.setLoSysSignatureBlob(LoSysSignatureBlob);
    var jsonParamsForSignature = [];
    var jsonQueryForSignature = {};
    var signatureBlobs = me.getLoSysSignatureBlob().getItems();

    var referencePKey = signatureBlobs.map(function(item){return item.getSignaturePKey();});


    jsonParamsForSignature.push({
      "field" : "referencePKey",
      "value" : "'" + referencePKey.join("','") + "'"
    });

    jsonQueryForSignature.params = jsonParamsForSignature;

    return Facade.getListAsync("LoSysSignatureAttribute",jsonQueryForSignature);
  }
})
.then(function (LoSysSignatureAttribute){
  if (Utils.isDefined(LoSysSignatureAttribute))  {
    me.setLoSysSignatureAttribute(BoFactory.instantiateLightweightList("LoSysSignatureAttribute"));
    me.getLoSysSignatureAttribute().addItems(LoSysSignatureAttribute);
    me.getLoSysSignatureAttribute().setObjectStatus(STATE.PERSISTED);
  }
  return me;
});]]>
</Code>
  <Return name="boOrder" value="promise" />
</BusinessLogic>