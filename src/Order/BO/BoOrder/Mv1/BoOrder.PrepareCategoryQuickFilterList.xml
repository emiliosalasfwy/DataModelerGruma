<BusinessLogic methodName="prepareCategoryQuickFilterList" businessObjectClass="BoOrder" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="filterValue" type="Object" />
    <MethodInput name="promotion" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise;
var orderItems;
var ifSelectedInList = false;
var ifSelectedInCache = false;
var currentPromotion = "";

if(me.getBoOrderMeta().getConsiderSelectablePromotion() == '1' && Utils.isDefined(me.getLoSelectablePromotion().getCurrent())){
  currentPromotion = me.getLoSelectablePromotion().getCurrent();
}
var currentItemFilter = me.getLoItemFilter().getCurrent().getFilterCode();
var categoryId = me.getBoItemTabManager().getCurrentFilterId();

if(Utils.isDefined(me.getLoProductCategoryFilter())){
  ifSelectedInList = me.getLoProductCategoryFilter().getItemsByParam({"isSelected": true}).length > 0;
}
if(Utils.isDefined(me.getCategoryQuickFilterCache()) && !Utils.isEmptyString(me.getCategoryQuickFilterCache())){
  ifSelectedInCache = Object.keys(me.getCategoryQuickFilterCache()).length > 0;
}

//Creates list for all cases
var addItemsToLoProductCategoryFilter = function (items){
  var loProductCategoryFilter = me.getLoProductCategoryFilter();
  var categoryExists;
  var item;

  for (var i=0; i<items.length; i++){
    var category = Utils.getToggleText("DomPrdCategory", items[i].getCategory());
    categoryExists = loProductCategoryFilter.getItemsByParam({"text": category});
    if (categoryExists.length === 0){
      item = {
        "pKey": PKey.next(),
        "text": category,
        "isSelected": false,
        "specialOption": "",
        "filter": "Category"
      };
      loProductCategoryFilter.addListItems([item]);
    }
  }
  loProductCategoryFilter.orderBy({"text": "ASC"});
};

var selectedFilter;
//Reapply filter from either LoProductCategoryFilter or CategoryFilterCache
var applySelectedFilterToList = function (){
  var selectedFilterExistsInLo = me.getLoProductCategoryFilter().getItemsByParam({"text": selectedFilter});

  if(selectedFilterExistsInLo.length > 0){
    selectedFilterExistsInLo[0].setIsSelected(true);
  }
};


if((ifSelectedInList || ifSelectedInCache) && promotion === "0"){
  //Create list when one of the quick filters is selected either in LoProductQuickFilter or QuickFilterCache
  var loProductCategoryFilter = me.getLoProductCategoryFilter();

  if(ifSelectedInList === true){
    selectedFilter = loProductCategoryFilter.getItemsByParam({"isSelected": true})[0].text;
  } else{
    selectedFilter = me.getCategoryQuickFilterCache();
  }

  loProductCategoryFilter.removeAllItems();
  ApplicationContext.set('categoryFilter', selectedFilter);
  me.getLoItems().resetFilter("category");
  promise = loProductCategoryFilter.createAsync().then(
    function (){
      orderItems = me.getLoItems().getItems();
      if(!Utils.isDefined(filterValue)){
        me.getLoItems().resetAllFilters();
      }
      if(me.getBoOrderMeta().getConsiderSelectablePromotion() == '1' && Utils.isDefined(me.getLoSelectablePromotion().getCurrent())){
        me.getLoItems().setItemFilter(currentItemFilter, categoryId, currentPromotion.getPKey());
      }
      else{
        me.getLoItems().setItemFilter(currentItemFilter, categoryId, "");
      }
      if(orderItems.length > 0){
        addItemsToLoProductCategoryFilter(orderItems);
      }
      applySelectedFilterToList();
    });
} else{
  //Create new list when no quick filter is applied
  promise = BoFactory.createObjectAsync("LoProductCategoryFilter", {}).then(
    function (quickFilterList){
      me.setLoProductCategoryFilter(quickFilterList);

      if(promotion == "1"){
        //Reset filter and QuickFilterCache on promotion switch
        me.getLoItems().resetFilter("category");
        me.setCategoryQuickFilterCache(null);
        ApplicationContext.set('categoryFilter', null);
      } else{
        var loProductCategoryFilter = me.getLoProductCategoryFilter();
        orderItems = me.getLoItems().getItems();
        if(orderItems.length > 0){
          addItemsToLoProductCategoryFilter(orderItems);
        }
      }
    });
}]]>
</Code>
  <Return name="result" value="promise" />
</BusinessLogic>