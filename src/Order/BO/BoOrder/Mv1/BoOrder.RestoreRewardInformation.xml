<BusinessLogic methodName="restoreRewardInformation" businessObjectClass="BoOrder" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters />
<Code language="JavaScript">
<![CDATA[/* Restoring applicable and selected rewards:
- reselecting the rewards that have been saved to the database
- or selecting the first reward of a group otherwise
*/

var storedRewardString = me.getSelectedRewards();
if(Utils.isEmptyString(storedRewardString)){
  storedRewardString = "{}";
}
var storedRewards = JSON.parse(storedRewardString);
var rewards = me.getHurdleEvaluationHelper().getLoRewards().getAllItems();
var rewardGroups = {};


me.getHurdleEvaluationHelper().getLoRewards().suspendListRefresh();
me.getHurdleEvaluationHelper().getLoRewardProducts().suspendListRefresh();

rewards.forEach(function(reward){
  var promotion = reward.getPromotionPKey();
  var rewardGroup = reward.getRewardGroupId();

  //if no info about this group yet, create some initial info
  if(!(rewardGroup in rewardGroups)){
    rewardGroups[rewardGroup] = {newRewardGroup: true, selectedRewards: [], prioReward: undefined, sort:99999};
  }

  //did we store information about this reward group in the json?
  if(promotion in storedRewards){
    var rewardGroupsFromJson = storedRewards[promotion].filter(function(x){return x.id === rewardGroup;});
    if(rewardGroupsFromJson.length > 0){
      var savedGroup = rewardGroupsFromJson[0];
      rewardGroups[rewardGroup].newRewardGroup = false;

      //was this reward selected?
      var rewardsFromJson = savedGroup.rewards.filter(function(x){return x.id === reward.getPKey();});
      if(rewardsFromJson.length > 0){
        var savedReward = rewardsFromJson[0];
        reward.setSelected('1');
        reward.setPerFactor(savedReward.perFactor);
        //also restore the free item information
        if(reward.getRewardType() === "FreeItem" && savedReward.hasOwnProperty("freeItems")){
          var rewardProducts = me.getHurdleEvaluationHelper().getLoRewardProducts().getItems().filter(function(x){return x.getPromotionReward() === reward.getPKey();});

          savedReward.freeItems.forEach(function(item){
            var rewardProduct = rewardProducts.filter(function(rP){return rP.getPKey() === item.id;});
            if(rewardProduct.length > 0){
              rewardProduct[0].setQuantity(item.qty);
            }
          });
        }
      }
    }
    //when no reward is selected for a reward group in json then select auto granted reward
    else if(reward.getAutomaticallyGranted() == "1") {
      reward.setSelected('1');
    }
  }
  //search for all auto granted rewards of the group to make it selected
  else if(reward.getAutomaticallyGranted() == "1") {
    reward.setSelected('1');
  }
});

me.getHurdleEvaluationHelper().getLoRewards().resumeListRefresh(true);
me.getHurdleEvaluationHelper().getLoRewardProducts().resumeListRefresh(true);
var invalidFreeItemRewardPKeys = [];
var deferreds = [];
// check if there are free item rewards from invalidated promotions and call handleFreeItemsFromReward to remove those free items
for (var key in storedRewards) {
  var promotion = me.getLoSelectablePromotion().getAllItems().filter(function(item) {return item.pKey === key;});
  if (promotion.length === 0) {
    storedRewards[key].forEach(function(rewardGroup) {
      rewardGroup.rewards.forEach(function(reward) {
        if (reward.hasOwnProperty("freeItems")) {
          invalidFreeItemRewardPKeys.push(reward.id);
        }
      });
    });
  }
}

for (var i = 0; i < invalidFreeItemRewardPKeys.length; i++) {
  deferreds.push(me.handleFreeItemsFromReward(invalidFreeItemRewardPKeys[i]), false);
}

var promise = when.all(deferreds);]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>