<BusinessLogic methodName="loadProductForAdd" businessObjectClass="BoOrder" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="sdoItemMetaPKey" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise = when.resolve();

//List of products for add can be very big. Do not reload the list if it is already available !!!
if(!Utils.isDefined(me.getLoProductForAdd())){

  var useClosedListing = "0";
  var jsonQuery = {
    params : []
  };
  //Removed to get all the products which are part of LoProductForAdd - load 
  //BoFactory.loadObjectByParamsAsync(LO_PRODUCTFORADD,  me.getJsonQueryForProductForAdd())

  if (Utils.isSfBackend()) {
    jsonQuery = me.getJsonQueryForProductForAdd();
  }
  else {
    if (me.getBoOrderMeta().getItemListOption() == "Hierarchy") {
      jsonQuery.params.push( { "field" : "criterionAttribute", "value" : me.getBoOrderMeta().getCriterionAttributeForLevel(me.getBoOrderMeta().getNumberOfHierarchyLevels())});    
    }
    else {
      jsonQuery.params.push({ "field": "criterionAttribute", "value": me.getBoOrderMeta().getCriterionAttributeForFlatList()});
    }
    //Passing variable for closed listing filter
    jsonQuery.params.push({ "field": "listing", "value": me.getBoOrderMeta().getListing()});
    jsonQuery.params.push({ "field": "listingWithModules", "value": me.getBoOrderMeta().getListingWithModules()});
    jsonQuery.params.push({ "field": "hitClosedListing", "value": me.getLuOrderer().getHitClosedListing()});
    jsonQuery.params.push({ "field": "collectClosedListing", "value": me.getLuOrderer().getCollectClosedListing()});
    jsonQuery.params.push({ "field": "considerListing", "value" : me.getBoOrderMeta().getConsiderListing()});
    jsonQuery.params.push({ "field": "useConsiderModule" , "value": me.getLuOrderer().getConsiderModule()});
  }
  // handle the case that free item is generated for product that is not in the closed listing of the used order item template
  if ((!Utils.isDefined(sdoItemMetaPKey)) || (sdoItemMetaPKey === '0')) {
    if (!Utils.isDefined(me.getBoOrderMeta().getLoOrderItemMetas().getCurrent())) {
      if (Utils.isDefined(me.getBoOrderMeta().getLoOrderItemMetas().getMainItemTemplate())) {
        useClosedListing = me.getBoOrderMeta().getLoOrderItemMetas().getMainItemTemplate().getUseClosedListing();
        jsonQuery.params.push({ "field": "useClosedListing", "value" : useClosedListing});
      }
      else {
        useClosedListing = me.getBoOrderMeta().getLoOrderItemMetas().getFirstItem().getUseClosedListing();
        jsonQuery.params.push({ "field": "useClosedListing", "value" : useClosedListing});
      }
    }
    else {
      useClosedListing = me.getBoOrderMeta().getLoOrderItemMetas().getCurrent().getUseClosedListing();
      jsonQuery.params.push({ "field": "useClosedListing", "value" : useClosedListing});
    }
  }
  else {
    useClosedListing = me.getBoOrderMeta().getLoOrderItemMetas().getItemTemplateByPKey(sdoItemMetaPKey).getUseClosedListing();
    jsonQuery.params.push({ "field" : "useClosedListing" , "value" : useClosedListing});
  }

  if (Utils.isSfBackend()) {
    if(me.getBoOrderMeta().getConsiderListing() == 1 && useClosedListing == 1 && (me.getLuOrderer().getHitClosedListing() == 1 || me.getLuOrderer().getCollectClosedListing() == 1)) {
      jsonQuery.params.push({ "field" : "closedListingCondition" , "value" : " AND Listed = '1' "});
    }
  }

  promise = BoFactory.loadObjectByParamsAsync(LO_PRODUCTFORADD,  jsonQuery).then(
    function (lO_PRODUCTFORADD) {
      var products = lO_PRODUCTFORADD.getAllItems();
      me.setProductForAddDict(Utils.createDictionary());

      for (var i = 0; i < products.length; i++) {
        var currentItem = products[i];

        if (!Utils.isDefined(currentItem.getPKey()) || Utils.isEmptyString(currentItem.getPKey())) {
          currentItem.setPKey(PKey.next());
        }
        // create dictionary for LoProductForAdd
        me.getProductForAddDict().add(currentItem.getPrdMainPKey(), currentItem);
      }
      me.setLoProductForAdd(lO_PRODUCTFORADD);
    });
}]]>
</Code>
  <Return name="rtrn" value="promise" />
</BusinessLogic>