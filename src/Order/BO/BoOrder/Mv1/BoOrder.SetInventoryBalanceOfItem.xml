<BusinessLogic methodName="setInventoryBalanceOfItem" businessObjectClass="BoOrder" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="itemPKey" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise = when.resolve();

var ivcMetaPKeys = [];
var usrMainPKeys = [];
var bpaMainPKeys = [];
var prdMainPKeys = [];
var tmgTourPKeys = [];
var etpVehiclePKeys = [];

var jsonParamsForFinding = [];
var jsonQueryForFinding = {};

// create pKey and refPKey dictionaries for LoItems
var orderItemsPKeyDict = Utils.createDictionary();
var orderItemsRefPKeyDict = Utils.createDictionary();
var items = me.getLoItems().getAllItems();
var itemsLength = items.length;

for(var index = 0; index < itemsLength; index++){
  var currentItem = items[index];

  orderItemsPKeyDict.add(currentItem.getPKey(), currentItem);

  if(!orderItemsRefPKeyDict.containsKey(currentItem.getRefPKey())){
    orderItemsRefPKeyDict.add(currentItem.getRefPKey(), []);
  }
  orderItemsRefPKeyDict.data[currentItem.getRefPKey()].push(currentItem);
}

var mainItem = orderItemsPKeyDict.get(itemPKey);
var itemMeta = me.getBoOrderMeta().getLoOrderItemMetas().getItemTemplateByPKey(mainItem.getSdoItemMetaPKey());

//Preserve object status in order to avoid saving items just because of the setting of inventory balance
var objectStatus = mainItem.getObjectStatus();

if (Utils.isDefined(itemMeta)){
  // Determine inventory information only if the item template is used to UseUserInventory or UseQuota
  if ((itemMeta.getUseUserInventory() == "1") || (itemMeta.getUseQuota() == "1")){
    // Determine balance only if not already done
    if (Utils.isEmptyString(mainItem.getIvcInformationObject())){
      // Get inventory meta information with prepared search keys
      var ivcMetasByItemMeta = me.getBoOrderMeta().getIvcMetasByItemMeta(mainItem.getSdoItemMetaPKey());

      var inventoryType = "UserInventory+Quota";
      if(itemMeta.getUseUserInventory() == "1" && itemMeta.getUseQuota() == "0")inventoryType = "UserInventory";
      if(itemMeta.getUseUserInventory() == "0" && itemMeta.getUseQuota() == "1")inventoryType = "Quota";
      
      for (var i = 0; i < ivcMetasByItemMeta.length; i++){
        
        //do not consider cash float inventory only UserInventories and Quota (according to template switch)
        var metaId = ivcMetasByItemMeta[i].getMetaId();
        if(metaId != "CashFloat" && (inventoryType === "UserInventory+Quota" || metaId === inventoryType)){
          ivcMetaPKeys.push(ivcMetasByItemMeta[i].getIvcMetaPKey());
          usrMainPKeys.push(ivcMetasByItemMeta[i].getUsrMainPKey());
          bpaMainPKeys.push(ivcMetasByItemMeta[i].getBpaMainPKey());
          tmgTourPKeys.push(ivcMetasByItemMeta[i].getTmgTourPKey());
          etpVehiclePKeys.push(ivcMetasByItemMeta[i].getEtpVehiclePKey());
        }
        
      }

      prdMainPKeys.push(mainItem.getPrdMainPKey());

      jsonParamsForFinding.push({
        "field" : "ivcMetaPKeys",
        "value" : "'" + ivcMetaPKeys.join("','") + "'"
      });
      jsonParamsForFinding.push({
        "field" : "usrMainPKeys",
        "value" : "'" + usrMainPKeys.join("','") + "'"
      });
      jsonParamsForFinding.push({
        "field" : "bpaMainPKeys",
        "value" : "'" + bpaMainPKeys.join("','") + "'"
      });
      jsonParamsForFinding.push({
        "field" : "prdMainPKeys",
        "value" : "'" + prdMainPKeys.join("','") + "'"
      });
      jsonParamsForFinding.push({
        "field" : "tmgTourPKeys",
        "value" : "'" + tmgTourPKeys.join("','") + "'"
      });
      jsonParamsForFinding.push({
        "field" : "etpVehiclePKeys",
        "value" : "'" + etpVehiclePKeys.join("','") + "'"
      });

      jsonQueryForFinding.params = jsonParamsForFinding;

      var jsonQueryForUnitConversion = {
        "params" : [{
          "field" : "productPKey",
          "value" : mainItem.getPrdMainPKey()
        }]};
      var loUnitFactorForProduct;

      promise = BoFactory.loadObjectByParamsAsync("LoUnitFactorForProduct", jsonQueryForUnitConversion).then(
        function (unitFactorForProductLo) {
          // Get conversion information for product
          loUnitFactorForProduct = unitFactorForProductLo;

          return BoFactory.loadObjectByParamsAsync("LoInventoryFinding", jsonQueryForFinding);
        }
      ).then(
        function (loInventoryFinding){
          // Build inventory information object and store at item
          var liInventory;
          var ivcInformation;
          var ivcInformationObject = [];
          var params;
          var convertedBalance;

          for (var i = 0; i < ivcMetasByItemMeta.length; i++) {
            params = {};
            params.ivcMetaPKey = ivcMetasByItemMeta[i].getIvcMetaPKey();
            params.usrMainPKey = ivcMetasByItemMeta[i].getUsrMainPKey();
            params.bpaMainPKey = ivcMetasByItemMeta[i].getBpaMainPKey();
            params.prdMainPKey = mainItem.getPrdMainPKey();
            params.tmgTourPKey = ivcMetasByItemMeta[i].getTmgTourPKey();
            params.etpVehiclePKey = ivcMetasByItemMeta[i].getEtpVehiclePKey();

            ivcInformation = {};
            ivcInformation.ivcMainPKey = " ";
            ivcInformation.balance = 0;

            liInventory = loInventoryFinding.getItemsByParam(params);

            // If inventory found, add IvcMainPKey to IvcInformationObject
            if (liInventory.length > 0){

              // If used for display, store balance at order item
              if (ivcMetasByItemMeta[i].getUsedForDisplay() == "1"){

                //Convert inventory balance to unit of item
                var orderUnitItem = me.getLoItems().getFirstOrderUnitItemForMainItem(mainItem);

                convertedBalance = loUnitFactorForProduct.convertIvcMeasureToLogisticUnit(ivcMetasByItemMeta[i].getIvcMeasure(), liInventory[0].getBalance(), orderUnitItem.getQuantityLogisticUnit(), orderUnitItem.getPiecesPerSmallestUnit());
              }

              ivcInformation.ivcMainPKey = liInventory[0].getIvcMainPKey();
              ivcInformation.balance = liInventory[0].getBalance();
            }

            ivcInformation.ivcMetaByItemMeta = ivcMetasByItemMeta[i];
            ivcInformation.unitConversionInformation = loUnitFactorForProduct;

            ivcInformationObject.push(ivcInformation);
          }

          var loOrderItems = orderItemsRefPKeyDict.get(mainItem.refPKey);
          for (var j = 0; j < loOrderItems.length; j++){
            loOrderItems[j].setIvcInformationObject(ivcInformationObject);
          }

          if(Utils.isDefined(convertedBalance)){
            mainItem.setIvcBalance(convertedBalance); 
          }

          mainItem.setObjectStatus(objectStatus);
        }
      );
    }
  }
}]]>
</Code>
  <Return name="result" value="promise" />
</BusinessLogic>