<BusinessLogic methodName="beforeSaveAsync" businessObjectClass="BoOrder" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="context" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[// ----------------------------------------------------------------
// Process workflow actions (Set next state, phase and responsible)
// ----------------------------------------------------------------
var tmgMainPKey = "";
var isOrderPhaseChangeInProgress = me.getSetPhaseInBeforeSave() == "1";

if (Utils.isDefined(ApplicationContext.get('currentTourPKey')) && ApplicationContext.get('currentTourStatus') === "Running") {
  tmgMainPKey = ApplicationContext.get('currentTourPKey');
}
if (me.getDocumentType() == 'Replenishment') {
  me.setTmgMainPKey(tmgMainPKey);
}
if (Utils.isDefined(me.getLoItems())) {
  me.setItemErpIds();
}
if (Utils.isDefined(me.getHurdleEvaluationHelper())) {
  me.storeRewardInformation();
}

var auditTrailPromise = when.resolve();
if (Utils.isSfBackend() && me.getBoOrderMeta().getGenerateRewardsLog() == "Yes" && me.getBoOrderMeta().getConsiderSelectablePromotion() == "1" && 
    me.getPhase() !== "Canceled" && me.getOrderStatus() !== "copy" && me.getOrderStatus() !== "delete") {
  auditTrailPromise = me.createAuditTrailJSON();
}

var pricingJsonPromise = auditTrailPromise.then(
  function () {
    if (me.getBoOrderMeta().getGeneratePricingLog() == "Yes" && me.getOrderStatus() !== "delete") {
      return me.cpAttachDebugJSON(me.getPricingJSON());
    }
  });

/*Reset special rewards on initial order save - will be reapplied on order load
Resetting should be done after creation of audit trail and pricing json*/
var userExitPromise = pricingJsonPromise.then(
  function () {
    var isOrderPhaseInitial = !isOrderPhaseChangeInProgress && me.getPhase() === "Initial" &&
        me.getOrderStatus() !== "copy" && me.getOrderStatus() !== "delete";

    if (Utils.isSfBackend() && isOrderPhaseInitial && me.getBoOrderMeta().getConsiderSelectablePromotion() == "1") {
      var deferreds = [];
      var specialRewards = me.getHurdleEvaluationHelper().getLoRewards().getItemsByParamArray([{"rewardType" : "Special"}, {"isApplicable" : "1"}, {"selected" : "1"}]);
      specialRewards.forEach(function(item) {
        deferreds.push(me.getHurdleEvaluationHelper().userExitForSpecialReward(item, true));
      });
      return when.all(deferreds);
    }
  });

var promise = userExitPromise.then(
  function () {
    if (isOrderPhaseChangeInProgress && Utils.isDefined(me.getBoWorkflow())) {
      var actualState_beforeTransiton = me.getActualStatePKey();
      var actualStatePKey_afterTransition = " ";
      var nextStatePKey_afterTransition = " ";
      var phase_afterTransition = " ";
      //Determine ActualStatePKey to PKey of next phase
      var nextStates = me.getBoWorkflow().getNextStates(me.getActualStatePKey());

      if (nextStates.length > 0) {
        actualStatePKey_afterTransition = nextStates[0].toStatePKey;
        phase_afterTransition = nextStates[0].stateType;
        //Set NextStatePKey to ActualStatePKey (setting to nextStatePKey would not be correct - save at Web after sync would do state transition)
        nextStatePKey_afterTransition = nextStates[0].toStatePKey;
      }

      //Determine next responsible
      return me.getBoWorkflow().getNextResponsible(nextStatePKey_afterTransition, me.getResponsiblePKey(), me.getOwnerPKey()).then(
        function (nextResponsible) {
          //Reset internal property to avoid duplicate phase and responsible setting
          me.setSetPhaseInBeforeSave("0");

          //Set next responsible, states and, phase
          //Note: If no responsible has been found, a message is displayed in after save
          if (Utils.isDefined(nextResponsible)) {
            me.setResponsiblePKey(nextResponsible);
            me.setActualStatePKey(actualStatePKey_afterTransition);
            me.setNextStatePKey(nextStatePKey_afterTransition);
            me.setPhase(phase_afterTransition);

            if (Utils.isSfBackend()) {
              //<!-- SF/CASDIF  needed for Workflow handling in the SF backend (via approval processes)-->
              me.setSf_mobilityRelease("1");
            }

            if (me.getBoWorkflow().getRecentStatePolicy() == "1") {
              return BoFactory.createListAsync(LO_ORDERRECENTSTATE, {});
            }
          }
        }).then(
        function (loRecentState) {
          if (Utils.isDefined(loRecentState)) {
            me.setLoRecentState(loRecentState);

            //Write recent state entry
            var jsonData = {};
            jsonData.pKey = PKey.next();
            jsonData.done = Utils.createDateToday();
            jsonData.sdoMainPKey = me.getPKey();
            jsonData.usrMainPKey = ApplicationContext.get('user').getPKey();
            jsonData.wfeStatePKey = actualState_beforeTransiton;

            me.getLoRecentState().addItems([jsonData]);
            me.getLoRecentState().getItemsByParam({
              "pKey": jsonData.pKey
            })[0].setObjectStatus(me.self.STATE_NEW_DIRTY);
          }

          if (me.getDocTaType() === "NonValuatedDeliveryNote") {
            if (Utils.isDefined(me.getLoSdoConditions())) {
              me.getLoSdoConditions().delete();
            } else {
              return BoFactory.loadObjectByParamsAsync(LO_SDOCONDITIONS, me.getQueryBy("sdoMainPKey", me.getPKey())).then(
                function (lo) {
                  me.setLoSdoConditions(lo);
                  me.getLoSdoConditions().delete();
                });
            }
          }
        });
    }
  });]]>
</Code>
  <Return name="result" value="promise" />
</BusinessLogic>