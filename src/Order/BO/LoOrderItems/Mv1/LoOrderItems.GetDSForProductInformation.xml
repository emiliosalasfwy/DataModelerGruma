<BusinessLogic methodName="getDSForProductInformation" businessObjectClass="LoOrderItems" businessObjectType="" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="mergeProperty" type="DomString" />
    <MethodInput name="allowForeignProducts" type="DomBool" />
    <MethodInput name="considerFieldState" type="DomBool" />
    <MethodInput name="defaultQuantityLogisticUnit" type="DomSdoPdaQuantityLogisticUnit" />
    <MethodInput name="considerNewProducts" type="DomBool" />
    <MethodInput name="commitDate" type="DomDate" />
    <MethodInput name="flatItemListGroupingAttribute" type="DomString" />
    <MethodInput name="criterionFilterAttribute" type="DomString" />
    <MethodInput name="criterionFilterValue" type="DomString" />
    <MethodInput name="itemListOption" type="DomSdoItemListOption" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[// Datasource name (required by merge engine)
var LO_MEPRODUCTINFORMATION = "LoMeProductInformation";

var dsParams = "";
var dsParams_array = [];

dsParams_array.push({ "field": "commitDate", "value": commitDate });

if (itemListOption == "Hierarchy") {
  dsParams_array.push({ "field": "criterionAttribute", "value": criterionFilterAttribute });
} else {
  dsParams_array.push({ "field": "criterionAttribute", "value": flatItemListGroupingAttribute });
}

//Build datasource params depending on input parameters

//SF/CASDiff: General Difference
if(Utils.isSfBackend()) // <!-- CW-REQUIRED: Framework is now Utils -->
{
  dsParams_array.push({ "field": "addCond_ProductState", "value": " Product2.State__c='4' " });

  if ((typeof allowForeignProducts != "undefined") && (allowForeignProducts != 1)) {
    dsParams_array.push({ "field": "addCond_ForeignProduct", "value": " AND Product2.Competitive_Product__c = '0' " });
  }

  if ((typeof considerFieldState != "undefined") && (considerFieldState == 1)) {
    dsParams_array.push({ "field": "addCond_FieldState", "value": " AND (#compareAsDate('Product2.Field_Valid_From__c ', 'Date','<=',#TodayAsDate#, 'Date')#  AND #compareAsDate('Product2.Field_Valid_Thru__c', 'Date','>=',#TodayAsDate#, 'Date')#) " });
  }

  if ((typeof considerNewProducts != "undefined") && (considerNewProducts === 0)) {
    dsParams_array.push({ "field": "addCond_NewState", "value": " AND (#compareAsDate('Product2.New_Item_Valid_From__c ', 'Date','<=',#TodayAsDate#, 'Date')#  AND #compareAsDate('Product2.New_Item_Valid_Thru__c', 'Date','>=',#TodayAsDate#, 'Date')# ) " });
  }

}
else
{
  if ((typeof allowForeignProducts != "undefined") && (allowForeignProducts != 1)) {

    dsParams_array.push({ "field": "addCond_ForeignProduct", "value": " AND PrdProduct.ForeignProduct = '0' " });
  }

  if ((typeof considerFieldState != "undefined") && (considerFieldState == 1)) {

    dsParams_array.push({ "field": "addCond_FieldState", "value": " AND PrdStateAbstract.FieldState = 'Available' " });
  }

  if ((typeof considerNewProducts != "undefined") && (considerNewProducts === 0)) {

    dsParams_array.push({ "field": "addCond_NewState", "value": " AND PrdStateAbstract.NewState = 'NotAvailable' " });
  }
}
dsParams = { "params": dsParams_array };

//Build datasource columns depending on imput parameters
var dsColumns_array = [];

if (defaultQuantityLogisticUnit == "OrderUnit") {
  dsColumns_array.push({ "name": "orderQuantityLogisticUnit", "alias" : "defaultQuantityLogisticUnit" });
  dsColumns_array.push({ "name": "orderPiecesPerSmallestUnit", "alias" : "defaultPiecesPerSmallestUnit" });
} else if (defaultQuantityLogisticUnit == "ConsumerUnit") {
  dsColumns_array.push({ "name": "consumerQuantityLogisticUnit", "alias" : "defaultQuantityLogisticUnit" });
  dsColumns_array.push({ "name": "consumerPiecesPerSmallestUnit", "alias" : "defaultPiecesPerSmallestUnit" });
} else if (defaultQuantityLogisticUnit == "PriceUnit") {
  dsColumns_array.push({ "name": "priceQuantityLogisticUnit", "alias" : "defaultQuantityLogisticUnit" });
  dsColumns_array.push({ "name": "pricePiecesPerSmallestUnit", "alias" : "defaultPiecesPerSmallestUnit" });
} else {
  dsColumns_array.push({ "name": "orderQuantityLogisticUnit", "alias" : "defaultQuantityLogisticUnit" });
  dsColumns_array.push({ "name": "orderPiecesPerSmallestUnit", "alias": "defaultPiecesPerSmallestUnit" });
}

dsColumns_array.push({ "name": "pKey", "alias": "prdMainPKey" });
dsColumns_array.push({ "name": "text1", "alias": "text1" });
dsColumns_array.push({ "name": "text2", "alias": "text2" });
dsColumns_array.push({ "name": "prdId", "alias": "prdId" });
dsColumns_array.push({ "name": "shortId", "alias": "shortId" });
dsColumns_array.push({ "name": "taxClassification", "alias": "taxClassification" });
dsColumns_array.push({ "name": "simplePricingBasePrice", "alias": "simplePricingBasePrice" });
dsColumns_array.push({ "name": "deliveryState", "alias": "deliveryState" });
dsColumns_array.push({ "name": "fieldState", "alias": "fieldState" });
dsColumns_array.push({ "name": "foreignProduct", "alias": "foreignProduct" });
dsColumns_array.push({ "name": "eAN", "alias": "eAN" });
dsColumns_array.push({ "name": "newState", "alias": "newState" });
dsColumns_array.push({ "name": "piecesPerSmallestUnitForBasePrice", "alias": "piecesPerSmallestUnitForBasePrice" });
dsColumns_array.push({ "name": "groupText", "alias": "groupText" });
dsColumns_array.push({ "name": "groupId", "alias": "groupId" });
dsColumns_array.push({ "name": "prdType", "alias": "prdType" });
dsColumns_array.push({ "name": "criterion1", "alias": "criterion1" });
dsColumns_array.push({ "name": "criterion2", "alias": "criterion2" });
dsColumns_array.push({ "name": "criterion3", "alias": "criterion3" });
dsColumns_array.push({ "name": "criterion4", "alias": "criterion4" });
dsColumns_array.push({ "name": "criterion5", "alias": "criterion5" });
dsColumns_array.push({ "name": "criterion6", "alias": "criterion6" });
dsColumns_array.push({ "name": "category", "alias": "category" });

//Build datasource definiton
var datasourceDefiniton = {
  "boName": LO_MEPRODUCTINFORMATION,
  "dsParams": dsParams,
  "matchingColumn": "pKey",
  "dataSourceColumns": dsColumns_array,
  "mergeProperty": mergeProperty,
  "lookupDataSource": Utils.isSfBackend().toString()
};]]>
</Code>
  <Return name="dsForProductInformation" value="datasourceDefiniton" />
</BusinessLogic>