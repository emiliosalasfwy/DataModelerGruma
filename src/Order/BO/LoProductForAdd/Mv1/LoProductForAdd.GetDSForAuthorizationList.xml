<BusinessLogic methodName="getDSForAuthorizationList" businessObjectClass="LoProductForAdd" businessObjectType="" asynchronous="null" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="mergeProperty" type="DomString" />
    <MethodInput name="customerPKey" type="DomPKey" />
    <MethodInput name="listing" type="DomSdoPdaListingFinding" />
    <MethodInput name="listingWithModules" type="DomSdoPdaListingFinding" />
    <MethodInput name="addCond_ProductPKeys" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[// Datasource name (required by merge engine)
var LO_MEAUTHORIZATIONLIST = "LoMeAuthorizationList";
var LO_MEAUTHORIZATIONLIST_WITHOUT_MODULES = "LoMeAuthorizationListWithoutModules";

var dsParams = "";
var dsParams_array = [];

var listobject = "";

if(Utils.isSfBackend()) // <!-- CW-REQUIRED: Framework is now Utils -->
{
  if (listing == "Hit")
  {
    listobject = LO_MEAUTHORIZATIONLIST_WITHOUT_MODULES;
    dsParams_array.push({ "field": "customerPKey", "value": customerPKey });
  } 
  else
  {
    listobject = LO_MEAUTHORIZATIONLIST;
    dsParams_array.push({ "field": "customerPKey", "value": customerPKey });
  }
}
else
{
  // Dermine parameter values for Listing and ListingWithModules
  if (typeof listing != "undefined") {
    if (listing == "Collection") {
      listobject = LO_MEAUTHORIZATIONLIST_WITHOUT_MODULES;
      dsParams_array.push({ "field": "addCond_Listing", "value": "AND (PrdProposalAuthListPrdRel.Listing = 'Collection' OR PrdProposalAuthListPrdRel.Listing = 'Hit') "});
    } else if (listing == "Hit") {
      listobject = LO_MEAUTHORIZATIONLIST_WITHOUT_MODULES;
      dsParams_array.push({ "field": "addCond_Listing", "value": "AND PrdProposalAuthListPrdRel.Listing = 'Hit' "});
    }
  }

  if (typeof listingWithModules != "undefined") {
    if (listingWithModules == "Collection") {
      listobject = LO_MEAUTHORIZATIONLIST;
      dsParams_array.push({ "field": "addCond_ListingWithModules", "value": " AND (PrdProposalAuthListPrdRel.ListingWithModules = 'Collection' OR PrdProposalAuthListPrdRel.ListingWithModules = 'Hit' )"});
    } else if (listingWithModules == "Hit") {
      listobject = LO_MEAUTHORIZATIONLIST;
      dsParams_array.push({ "field": "addCond_ListingWithModules", "value": " AND PrdProposalAuthListPrdRel.ListingWithModules = 'Hit' "});
    } 
  }  

  dsParams_array.push({ "field": "customerPKey", "value": customerPKey });

  // Add additional conditions for restricting products, e.g. invalid product check (called from LoOrderItems.processInvalidItems());  
  if (!Utils.isEmptyString(addCond_ProductPKeys)) {
    dsParams_array.push({ "field": "addCond_productPKeys", "value": " AND PrdMainPKey IN (" + addCond_ProductPKeys + ") " });
  }
}

dsParams = { "params": dsParams_array };

var datasourceDefiniton = {
  "boName": listobject,
  "dsParams": dsParams,
  "matchingColumn": "prdMainPKey",
  "dataSourceColumns": [
    { "name": "listed", "alias": "listed", "default": "0" },
    { "name": "listing", "alias": "listing" },
    { "name": "listingWithModules", "alias": "listingWithModules" },
    { "name": "customerProductNumber", "alias": "customerProductNumber"},
    { "name": "focusProductType", "alias": "focusProductType"},
    { "name": "focusProductImage", "alias": "focusProductImage"}
  ],
  "mergeProperty": mergeProperty,
  "lookupDataSource": "false"
};]]>
</Code>
  <Return name="dsForAuthorizationList" value="datasourceDefiniton" />
</BusinessLogic>