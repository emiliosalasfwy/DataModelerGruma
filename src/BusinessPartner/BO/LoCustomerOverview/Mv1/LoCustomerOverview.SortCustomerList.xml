<BusinessLogic methodName="sortCustomersByDistance" businessObjectClass="LoCustomerOverview" businessObjectType="listobject" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="currentLatitude" type="String" />
    <MethodInput name="currentLongitude" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var customersList = me.getAllItems();
var customerLatitude;
var customerLongitude;
var milesToYardFactor = 1760;
var kmToMeterFactor = 1000;

if(Utils.isDefined(currentLatitude) && Utils.isDefined(currentLongitude)){   
  for (var i = 0; i<customersList.length;i++)  {
    customerLatitude = customersList[i].latitude;
    customerLongitude = customersList[i].longitude; 
	var customerLatAndLongAreUndefined = !(Utils.isDefined(customerLatitude) && Utils.isDefined(customerLongitude));
    var customerLatAndLongAreZero = (customerLatitude === 0.0 && customerLongitude === 0.0);
    if( customerLatAndLongAreZero || customerLatAndLongAreUndefined) {
      //For unknown location - it will display in end of the list      
      customersList[i].grouping1 = '# Unknown'; 
      customersList[i].setSortText(0 +' Miles');
      customersList[i].setDistance(NaN);
    }
    else {
      var distanceUnit = ApplicationContext.get('user').getDistanceUnit();
      //Caluclate the distance between current user's location and customers's location
      var deviation = Utils.distanceBetween(currentLatitude, currentLongitude, customerLatitude, customerLongitude, distanceUnit);      

      if(Utils.isEmptyString(customersList[i].getName().trim())) {
        customersList[i].setDistance(padWithZeros(deviation.toFixed(1), 8));
      }
      else {
        customersList[i].setDistance(deviation.toFixed(8));
      }
      // Set the grouptext and distancetext in order to display the customer list in ascending order.
      // Space is added in group text to sort the group in ascending order.
      switch (distanceUnit) { 
        case 'miles':
          switch (1) {
            case (Math.abs(deviation <= 0.00284091)): 
              customersList[i].grouping1 = '    5 Y';
              customersList[i].setDistanceText((deviation*milesToYardFactor).toFixed(1)+' Y'); 
              break;
            case (Math.abs(deviation > 0.00284091) && Math.abs(deviation <= 0.0284091)): 
              customersList[i].grouping1 = '    50 Y';   
              customersList[i].setDistanceText((deviation*milesToYardFactor).toFixed(1)+' Y');                
              break;
            case (Math.abs(deviation > 0.0284091) && Math.abs(deviation <= 0.284091)): 
              customersList[i].grouping1 = '    500 Y';
              customersList[i].setDistanceText((deviation*milesToYardFactor).toFixed(1)+' Y');
              break;
            case (Math.abs(deviation > 0.284091) && Math.abs(deviation <= 5)):
              //Show the distance value in Yards if it is less than 1 Mile
              if(Math.abs(deviation < 1.0)) {
                customersList[i].setDistanceText((deviation*milesToYardFactor).toFixed(1)+' Y');
              }
              else {
                customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              }
              customersList[i].grouping1 = '   5 Miles';               
              break;
            case (Math.abs(deviation > 5) && Math.abs(deviation <= 10)): 
              customersList[i].grouping1 = '  10 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 10) && Math.abs(deviation <= 20)):  
              customersList[i].grouping1 = '  20 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 20) && Math.abs(deviation <= 30)):  
              customersList[i].grouping1 = '  30 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 30) && Math.abs(deviation <= 40)):
              customersList[i].grouping1 = '  40 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 40) && Math.abs(deviation <= 50)):  
              customersList[i].grouping1 = '  50 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 50) && Math.abs(deviation <= 60)): 
              customersList[i].grouping1 = '  60 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 60) && Math.abs(deviation <= 70)):
              customersList[i].grouping1 = '  70 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 70) && Math.abs(deviation <= 80)): 
              customersList[i].grouping1 = '  80 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 80) && Math.abs(deviation <= 90)):  
              customersList[i].grouping1 = '  90 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 90) && Math.abs(deviation <= 100)):  
              customersList[i].grouping1 = ' 100 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
            case (Math.abs(deviation > 100)): 
              customersList[i].grouping1 = ' > 100 Miles';
              customersList[i].setDistanceText(deviation.toFixed(1)+' Miles');
              break;
          }
          break;
        case 'km':
          switch (1) {
            case (Math.abs(deviation <= 0.005)):  
              customersList[i].grouping1 = '    5 M';
              customersList[i].setDistanceText((deviation*kmToMeterFactor).toFixed(1)+' M');
              break;
            case (Math.abs(deviation > 0.005) && Math.abs(deviation <= 0.05)):
              customersList[i].grouping1 = '    50 M';
              customersList[i].setDistanceText((deviation*kmToMeterFactor).toFixed(1) +' M');
              break;
            case (Math.abs(deviation > 0.05) && Math.abs(deviation <= 0.5)):  
              customersList[i].grouping1 = '    500 M';
              customersList[i].setDistanceText((deviation*kmToMeterFactor).toFixed(1)+' M');
              break;
            case (Math.abs(deviation > 0.5) && Math.abs(deviation <= 5)):
              //Show the distance value in Meters if it is less than 1 Km
              if(Math.abs(deviation < 1.0)) {
                customersList[i].setDistanceText((deviation*kmToMeterFactor).toFixed(1)+' M');
              }
              else {
                customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              }
              customersList[i].grouping1 = '   5 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 5) && Math.abs(deviation <= 10)):
              customersList[i].grouping1 = '  10 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 10) && Math.abs(deviation <= 20)):
              customersList[i].grouping1 = '  20 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 20) && Math.abs(deviation <= 30)):
              customersList[i].grouping1 = '  30 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 30) && Math.abs(deviation <= 40)): 
              customersList[i].grouping1 = '  40 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 40) && Math.abs(deviation.toFixed(1) <= 50)):
              customersList[i].grouping1 = '  50 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 50) && Math.abs(deviation <= 60)):
              customersList[i].grouping1 = '  60 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 60) && Math.abs(deviation <= 70)):
              customersList[i].grouping1 = '  70 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 70) && Math.abs(deviation <= 80)):
              customersList[i].grouping1 = '  80 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 80) && Math.abs(deviation <= 90)):
              customersList[i].grouping1 = '  90 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 90) && Math.abs(deviation <= 100)):
              customersList[i].grouping1 = ' 100 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
            case (Math.abs(deviation > 100)): 
              customersList[i].grouping1 = ' > 100 KM';
              customersList[i].setDistanceText(deviation.toFixed(1)+' KM');
              break;
          }
      }
    }
  } 
  me.orderBy({'distance' : 'ASC', 'name' : 'ASC'});
}

// Pad leading zeros with distance to show the customer in ascending order.
function padWithZeros(number, length) {
  var str = '' + number;
  while (str.length < length) {
    str = '0' + str;
  }
  return str;

}]]>
</Code>
  <Return name="" value="" />
</BusinessLogic>