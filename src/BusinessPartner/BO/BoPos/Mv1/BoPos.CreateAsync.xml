<BusinessLogic methodName="createAsync" businessObjectClass="BoPos" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="jsonQuery" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var customerPKey;
var bpaPosGeometryPKey;
var promise;

if (!jsonQuery) {
  jsonQuery={'params': []};
}
var pKey = PKey.next();
me.setPKey(pKey);
me.setId(pKey);
me.updateProperties(jsonQuery);

for (var index in jsonQuery.params) {
  switch (jsonQuery.params[index].field) {
    case "customerPKey":
      customerPKey = jsonQuery.params[index].value;
      break;

    case "bpaPosGeometryPKey":
      bpaPosGeometryPKey = jsonQuery.params[index].value;
      break;
  }
}

me.setBpaPOSGeometryPKey(bpaPosGeometryPKey);
me.setCustomerPKey(customerPKey);

if (!Utils.isDefined(me.getBpaPosMetaPKey())) {
  promise = BoFactory.createObjectAsync(BO_POSMETA, {'params': []});
}
else {
  promise = BoFactory.loadObjectByParamsAsync(BO_POSMETA, me.getQueryBy('pKey', me.getBpaPosMetaPKey()));
}

promise = promise.then(
  function (object) {
    //###################
    //### BO_POSMETA  ###
    //###################
    me.setBoPosMeta(object);

    return BoFactory.createListAsync(LO_BPAADDRESS, {'params': []});
  }).then(
  function (loBpaAddress) {
    me.setLoCustomerAddress(loBpaAddress);
    //Add Main Address
    me.getLoCustomerAddress().addItem(me.getPKey(),"1");
    var user = ApplicationContext.get('user');
    var jParams = [];
    var jQuery = {};
    // Prepare creation of BoBpaSales
    jParams.push({ "field" : "businessPartnerPKey", "value" : me.getPKey()});
    jParams.push({ "field" : "salesOrg", "value" : user.getBoUserSales().getSalesOrg()});
    jQuery.params = jParams;

    return BoFactory.createObjectAsync(BO_BPASALES, jQuery);
  }).then(
  function (object) {
    //####################
    //### BO_BPASALES  ###
    //####################
    me.setBoBpaSales(object);
    //Set object status of BoBpaSales to dirty since it will be not modified via GUI
    me.getBoBpaSales().setObjectStatus(STATE.NEW | STATE.DIRTY);

    return BoFactory.createListAsync(LO_CUSTOMERPOSRELATION, {'params': []});
  }).then(
  function (object) {
    //###############################
    //### LO_CUSTOMERPOSRELATION  ###
    //###############################
    me.setLoPOSCustomerRelation(object);
    // Variables
    var posPKey;
    var bpaRelMetaPKey;
    var loBpaPosMetaRel;
    // Initialization
    posPKey = me.getPKey();
    // Add relations according to BpaPOSMetaRel
    var arrayBpaPosMetaRel = me.getBoPosMeta().getLoBpaPosMetaRel().getAllItems();
    var x;
    for (x in arrayBpaPosMetaRel) {
      // Get PKey for RelationMeta
      bpaRelMetaPKey = arrayBpaPosMetaRel[x].getBpaRelMetaPKey();
      // Add relation
      me.getLoPOSCustomerRelation().addItem(posPKey, customerPKey, bpaRelMetaPKey);
    }
    //Set object status of all items of LoPOSCustomerRelation to dirty since it will be not modified via GUI
    var loPOSCustomerRelation = me.getLoPOSCustomerRelation().getAllItems();
    for (x in loPOSCustomerRelation) {
      loPOSCustomerRelation[x].setObjectStatus(STATE.NEW | STATE.DIRTY);
    }

    return BoFactory.loadObjectByParamsAsync("LuBpaMeta", me.getQueryBy("id", "POS"));
  }).then(
  function (lookupBpaMeta) {
    //####################
    //### BpaMetaPKey  ###
    //####################
    if (Utils.isDefined(lookupBpaMeta)) {
      me.setBpaMetaPKey(lookupBpaMeta.getPKey());
    }
    //Make BpaPOS dirty since it is directly saved to DB after add process
    me.setObjectStatus(STATE.NEW | STATE.DIRTY);

    return me;
  });]]>
</Code>
  <Return name="boPos" value="promise" />
</BusinessLogic>