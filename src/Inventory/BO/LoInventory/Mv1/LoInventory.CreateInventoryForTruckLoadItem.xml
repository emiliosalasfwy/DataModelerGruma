<BusinessLogic methodName="createInventoryForTruckLoadItem" businessObjectClass="LoInventory" businessObjectType="listobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="itemDetailObject" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var jsonParamsForFinding = [];
var jsonQueryForFinding = {};
var ivcMetaPKeys = [];
var bpaMainPKeys = [];
var tmgTourPKeys = [];
var vehiclePKeys = [];

itemDetailObject.ivcInformation = [];

for (var i = 0; i < itemDetailObject.ivcMetasByItemMeta.length; i++) {
  ivcMetaPKeys.push(itemDetailObject.ivcMetasByItemMeta[i].getIvcMetaPKey());
  bpaMainPKeys.push(itemDetailObject.ivcMetasByItemMeta[i].getBpaMainPKey());

  if(itemDetailObject.ivcMetasByItemMeta[i].getTmgPolicy() === "One"){
    tmgTourPKeys.push(itemDetailObject.tmgMainPKey);
  }
  tmgTourPKeys.push(" ");

  if(itemDetailObject.ivcMetasByItemMeta[i].getVehiclePolicy() === "One"){
    vehiclePKeys.push(ApplicationContext.get('currentTour').getEtpVehicleTruckPKey());
  }
  vehiclePKeys.push(" ");
}

jsonParamsForFinding.push({ "field": "ivcMetaPKeys", "value": "'" + ivcMetaPKeys.join("','") + "'" });
jsonParamsForFinding.push({ "field": "usrMainPKeys", "value": "'" + itemDetailObject.usrMainPKey + "'" });
jsonParamsForFinding.push({ "field": "bpaMainPKeys", "value": "'" + bpaMainPKeys.join("','") + "'" });
jsonParamsForFinding.push({ "field": "prdMainPKeys", "value": "'" + itemDetailObject.prdMainPKey + "'" });
jsonParamsForFinding.push({ "field": "tmgTourPKeys", "value": "'" + tmgTourPKeys.join("','") + "'" });
jsonParamsForFinding.push({ "field": "etpVehiclePKeys", "value": "'" + vehiclePKeys.join("','") + "'" });

jsonQueryForFinding.params = jsonParamsForFinding;

var promise = BoFactory.loadObjectByParamsAsync("LoInventoryFinding", jsonQueryForFinding)
.then(function(result){

  for(var i=0; i<itemDetailObject.ivcMetasByItemMeta.length;i++){
    var ivcMainPKey= "";
    var ivcMetaByItemMeta = itemDetailObject.ivcMetasByItemMeta[i];
    //search existing inventories
    var params = {};
    params.ivcMetaPKey = ivcMetaByItemMeta.getIvcMetaPKey();

    if(ivcMetaByItemMeta.getUsrPolicy() === "One"){
      params.usrMainPKey = itemDetailObject.usrMainPKey;
    }else{
      params.usrMainPKey = " ";
    }
    params.bpaMainPKey = ivcMetaByItemMeta.getBpaMainPKey();

    if(ivcMetaByItemMeta.getTmgPolicy() === "One"){
      params.tmgTourPKey = itemDetailObject.tmgMainPKey;
    }
    else{
      params.tmgTourPKey = " ";
    }

    if(ivcMetaByItemMeta.getVehiclePolicy() === "One"){
      params.etpVehiclePKey = ApplicationContext.get('currentTour').getEtpVehicleTruckPKey();
    }
    else{
      params.etpVehiclePKey = " ";
    }

    params.prdMainPKey = itemDetailObject.prdMainPKey;

    var ivcInformation = {};
    ivcInformation.ivcMainPKey = " ";
    ivcInformation.balance = 0;

    var liInventory = result.getItemsByParam(params);
    //check if inventory was already created in the current run
    if (liInventory.length === 0){
      liInventory = me.getItemsByParam(params);
    }


    if (liInventory.length === 0) {
      //create new inventory
      var jsonIvcData = {};
      // Consider only UserInventories
      if(Utils.isDefined(ivcMetaByItemMeta)) {
        if (ivcMetaByItemMeta.getMetaId() == "UserInventory"  || ivcMetaByItemMeta.getMetaId() == "Unsalable") {

          //check if inventory is already available in list
          //e.g. if different item metas in same order (std, return) first item creates inventory second item has to reuse it
          var inventoryItems = me.getAllItems();
          var currentInventoryItem;
          for(var j=0; j < inventoryItems.length; j++){
            currentInventoryItem = inventoryItems[j];
            if(currentInventoryItem.getIvcMetaPKey() === ivcMetaByItemMeta.getIvcMetaPKey() &&
               currentInventoryItem.getUsrMainPKey() === ivcMetaByItemMeta.getUsrMainPKey() &&
               currentInventoryItem.getBpaMainPKey() === ivcMetaByItemMeta.getBpaMainPKey() &&
               currentInventoryItem.getPrdMainPKey() === itemDetailObject.prdMainPKey &&
               currentInventoryItem.getTmgTourPKey() === ivcMetaByItemMeta.getTmgTourPKey() &&
               currentInventoryItem.getEtpVehiclePKey() === ivcMetaByItemMeta.getEtpVehiclePKey()){
              ivcMainPKey = currentInventoryItem.getPKey();
              break;
            }
          }


          if(!Utils.isDefined(ivcMainPKey) || Utils.isEmptyString(ivcMainPKey)){
            ivcMainPKey = PKey.next();

            // Create inventory
            jsonIvcData = {};
            jsonIvcData.pKey = ivcMainPKey;
            jsonIvcData.ivcMetaPKey = ivcMetaByItemMeta.getIvcMetaPKey();
            jsonIvcData.bpaMainPKey = " ";
            jsonIvcData.prdMainPKey = itemDetailObject.prdMainPKey;
            jsonIvcData.phase = "Active";
            jsonIvcData.validFrom = Utils.createDateToday();
            jsonIvcData.validThru = Utils.getMaxDate();
            jsonIvcData.invalid = "0";
            jsonIvcData.salesOrg = ApplicationContext.get('user').getBoUserSales().getSalesOrg();

            if(ivcMetaByItemMeta.getUsrPolicy() === "One"){
              jsonIvcData.usrMainPKey = itemDetailObject.usrMainPKey;
            }
            else{
              jsonIvcData.usrMainPKey = " ";
            }

            if(ivcMetaByItemMeta.getTmgPolicy() === "One"){
              jsonIvcData.tmgTourPKey = itemDetailObject.tmgMainPKey;
            }
            else{
              jsonIvcData.tmgTourPKey = " ";
            }

            if(ivcMetaByItemMeta.getVehiclePolicy() === "One"){
              jsonIvcData.etpVehiclePKey = ApplicationContext.get('currentTour').getEtpVehicleTruckPKey();
            }
            else{
              jsonIvcData.etpVehiclePKey = " ";
            }

            me.addItems([jsonIvcData]);
            me.getItemByPKey(jsonIvcData.pKey).setObjectStatus(STATE.NEW | STATE.DIRTY);
          }
        }
      }


    }else{
      if(liInventory[0].getIvcMainPKey){
        ivcMainPKey = liInventory[0].getIvcMainPKey();
      }
      else if(liInventory[0].getPKey) {
        ivcMainPKey = liInventory[0].getPKey();
      }
      if(liInventory[0].getBalance) {
        ivcInformation.balance = liInventory[0].getBalance();
      }
    }

    itemDetailObject.ivcInformation.push({
      "ivcMainPKey" : ivcMainPKey,
      "ivcTaMetaPKey" : ivcMetaByItemMeta.getIvcTaMetaPKey(),
      "ivcMeasure" : ivcMetaByItemMeta.getIvcMeasure(),
      "tAControl" : ivcMetaByItemMeta.getTaControl(),
      "metaId" : ivcMetaByItemMeta.getMetaId(),
      "balance" : ivcInformation.balance
    });
  }
  return itemDetailObject;
});]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>