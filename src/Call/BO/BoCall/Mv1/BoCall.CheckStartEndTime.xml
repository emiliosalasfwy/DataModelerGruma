<BusinessLogic methodName="checkStartEndTime" businessObjectClass="BoCall" businessObjectType="businessobject" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters />
<Code language="JavaScript">
<![CDATA[/**
 This function is checking and correcting timezone differences between start and stop time of the visit
 If sales reps are working in different time zones it can happen that they open a visit in timezone A but complete the visit in timezone B.
 (e.g. opening the visit to check what to do and drive to the customer in another timezone with still having visit open in the app)
*/

// if stopTime is set  
if (me.getStopTimeEffective() !== Utils.getMinDate() && me.getOriginalClbStatus() !== "Completed") {

  // and start/stopp offset is different
  if(me.getStartTimeEffectiveTimezoneOffset() != me.getStopTimeEffectiveTimezoneOffset()){

    var diffStartEnd = me.getStartTimeEffectiveTimezoneOffset() - me.getStopTimeEffectiveTimezoneOffset();
    currentOffset = Utils.createDateNow().getTimezoneOffset();

    if(currentOffset == me.getStartTimeEffectiveTimezoneOffset()){
      // correct stop time
      var originalTimeStamp = me.getStopTimeEffective();
      var timeStampToCorrect = Utils.convertAnsiDate2Date(me.getStopTimeEffective());
      var newTime = timeStampToCorrect.getTime() + (diffStartEnd * 60 * 1000);
      timeStampToCorrect.setTime(newTime);
      me.setStopTimeEffective(Utils.convertDateTime2Ansi(timeStampToCorrect));
      AppLog.info("Visit timestamp correction due to timezone change - corrected StopTimeEffective. StopTimeEffective original Offset: " +  (me.getStopTimeEffectiveTimezoneOffset() || "unknown") + "; now: " + (currentOffset || "unknown"));
      AppLog.info("Details: VisitId " + (me.getPKey() || "unknown") + "; Visit Original Status " + (me.getOriginalClbStatus() || "unknown") + "; Visit Future Status " + (me.getClbStatus() || "unknown") + "; original StopTimeEffective " + (originalTimeStamp || "unknown") + "; corrected StopTimeEffective " + (me.getStopTimeEffective() || "unknown"));
    }else if (currentOffset == me.getStopTimeEffectiveTimezoneOffset()){
      // correct start time
      var originalTimeStamp = me.getStartTimeEffective();
      var timeStampToCorrect = Utils.convertAnsiDate2Date(me.getStartTimeEffective());
      var newTime = timeStampToCorrect.getTime() + (diffStartEnd * 60 * 1000);
      timeStampToCorrect.setTime(newTime);
      me.setStartTimeEffective(Utils.convertDateTime2Ansi(timeStampToCorrect));
      AppLog.info("Visit timestamp correction due to timezone change - corrected StartTimeEffective. StartTimeEffective original Offset: " +  (me.getStartTimeEffectiveTimezoneOffset() || "unknown") + "; now: " + (currentOffset || "unknown"));
      AppLog.info("Details: VisitId " + (me.getPKey() || "unknown") + "; Visit Original Status " + (me.getOriginalClbStatus() || "unknown") + "; Visit Future Status " + (me.getClbStatus() || "unknown") + "; original StartTimeEffective " + (originalTimeStamp || "unknown") + "; corrected StartTimeEffective " + (me.getStartTimeEffective() || "unknown"));
    }
  }
}
if (me.getStopTimeEffective() !== Utils.getMinDate() && me.getStartTimeEffective() > me.getStopTimeEffective()){
  AppLog.error("Visit StartTimeEffective/StopTimeEffective timestamps are invalid, sync might fail");
  AppLog.error("Details: VisitId " + (me.getPKey() || "unknown") + "; Visit Original Status " + (me.getOriginalClbStatus() || "unknown") + "; Visit Future Status " + (me.getClbStatus() || "unknown") + "; StartTimeEffective " + (me.getStartTimeEffective() || "unknown") + "; StopTimeEffective " + (me.getStopTimeEffective() || "unknown"));
}]]>
</Code>
  <Return name="" value="" />
</BusinessLogic>