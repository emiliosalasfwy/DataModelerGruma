<BusinessLogic methodName="calculateAccountReceivablesForCard" businessObjectClass="LoAccountReceivables" businessObjectType="listobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="customerPKey" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var jsonParams = [];

jsonParams.push({
  "field": "customerPKey",
  "operator": "EQ",
  "value": customerPKey
});

var jsonQuery = {};
jsonQuery.params = jsonParams;
var relevantAccountReceivables = [];
var currentDate = Utils.createAnsiDateToday();

var promise = BoFactory.loadObjectByParamsAsync("LoAccountReceivables", jsonQuery)
.then(function(loAccountReceivables) {
  var receivablesRelevantAccount = loAccountReceivables.getAllItems();

  receivablesRelevantAccount.forEach(function(accountRecievables) {

    if(accountRecievables.getDueDate() < currentDate && accountRecievables.getInvoiceStatus() === "UnPaid") {
      accountRecievables.setAccountReceivableIcon("WarningTriangle_IC");
    }
    else if (accountRecievables.getDueDate() < currentDate && accountRecievables.getInvoiceStatus() === "PartiallyPaid") {
      accountRecievables.setAccountReceivableIcon("WarningCircle_IC");
    }
    else if (accountRecievables.getDueDate() >= currentDate || accountRecievables.getDueDate() === Utils.getMinDate()) {
      accountRecievables.setAccountReceivableIcon(" ");
    }

    var accountReceivableDueDate = Localization.localize(accountRecievables.getDueDate(), "date");
    var accountReceivableReceiptDate = Localization.localize(accountRecievables.getReceiptDate(), "date");

    accountRecievables.setDueDateText(accountReceivableDueDate);
    accountRecievables.setReceiptDateText(accountReceivableReceiptDate);
    var documentTypeText = Utils.getToggleText("DomBpaReceivableDocType", accountRecievables.getDocumentType());

    if(!Utils.isEmptyString(accountRecievables.getDocumentType()) && !Utils.isEmptyString(accountRecievables.getExternalId())) {
      accountRecievables.setExternalIdInvoiceInfo(accountRecievables.getExternalId() + " - " + documentTypeText);
    }
    else if (Utils.isEmptyString(accountRecievables.getDocumentType())) {
      accountRecievables.setExternalIdInvoiceInfo(accountRecievables.getExternalId());
    }
    else if (Utils.isEmptyString(accountRecievables.getExternalId())) {
      accountRecievables.setExternalIdInvoiceInfo(documentTypeText);
    }

    relevantAccountReceivables.push(accountRecievables);
  });

  me.cardItemCount = relevantAccountReceivables.length;
  me.removeAllItems();
  me.addItems(relevantAccountReceivables);
});]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>