<BusinessLogic methodName="updateHistoricalProductsAsync" businessObjectClass="BoJobManager" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="action" type="String" />
    <MethodInput name="prdMainPKey" type="String" />
    <MethodInput name="posId" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var promise;

// determine POSBpaMainPKEy (or blank if store)
var posPKey = posId;
if (posId !== " ") {
  var loCurrentPOS = this.getLoPOS().getItemsByParam({
    "posId" : posId
  });

  if (loCurrentPOS.length > 0) {
    posPKey = loCurrentPOS[0].getBpaMainPKey();
  }
}

var clbMetaPKey = " ";
if (me.getHistoricalProductConfig() === "SameMeta") {
  clbMetaPKey = me.getClbMetaPKey();
}

// Check the Survey Products List in dictionary
var dictProductList = me.getDictHistoricalProductsLoaded();
if (!Utils.isDefined(dictProductList)) {
  dictProductList = Utils.createDictionary();
  me.setDictHistoricalProductsLoaded(dictProductList);
}

// Check if the PrdMainPkey is already there in the dictionary
if (!dictProductList.containsKey(prdMainPKey)) {
  // Load the Products by calling Async method

  // Check the list which has already been loaded
  var jsonQueryHist = {};
  jsonQueryHist.params = [
    {
      "field" : "bpaCustomerPKey",
      "operator" : "EQ",
      "value" : me.getBpaMainPKey()
    },
    {
      "field" : "bpaCustomerPKeyComp",
      "operator" : "EQ",
      "value" : "EQ"
    },
    {
      "field" : "prdMainPKey",
      "operator" : "EQ",
      "value" : prdMainPKey
    },
    {
      "field" : "prdMainPKeyComp",
      "operator" : "EQ",
      "value" : "EQ"
    }
  ];

  if (me.getHistoricalProductConfig() === "SameMeta") {
    jsonQueryHist.params.push({
      "field" : "clbMetaPKey",
      "operator" : "EQ",
      "value" : me.getClbMetaPKey()
    });
    jsonQueryHist.params.push({
      "field" : "clbMetaPKeyComp",
      "operator" : "EQ",
      "value" : "EQ"
    });
  }

  if (!Utils.isDefined(me.getLoHistoricalProducts())){
    promise = BoFactory.loadListAsync("LoBpaHistSurveyProduct", jsonQueryHist).then(
      function (list) {
        me.setLoHistoricalProducts(list);
      }
    );
  } else {
    promise = when.resolve();
  }
} else {
  promise = when.resolve();
}

promise = promise.then(
  function () {
    // Add in the dictionary
    dictProductList.add(prdMainPKey, prdMainPKey);

    var loHistPrdForProduct = me.getLoHistoricalProducts().getItemsByParamArray([
      {
        "prdMainPKey" : prdMainPKey,
        "op" : "EQ"
      }, {
        "objectStatus" : this.self.STATE_DELETED,
        "op" : "NE"
      }
    ], [
      {
        "bpaPOSPKey" : "ASC"
      }
    ]);

    var loHistPrdForProductAndPos = me.getLoHistoricalProducts().getItemsByParamArray([
      {
        "prdMainPKey" : prdMainPKey,
        "op" : "EQ"
      }, {
        "bpaPOSPKey" : posPKey,
        "op" : "EQ"
      }, {
        "objectStatus" : this.self.STATE_DELETED,
        "op" : "NE"
      }
    ], []);

    var aCurrentPOSProduct;

    switch (action) {
      case "add":
        var bValidEntryExists = false;

        if ((posId === " " && loHistPrdForProduct.length > 0) || (posId !== " " && loHistPrdForProductAndPos.length > 0)) {
          bValidEntryExists = true;
        }

        if (!bValidEntryExists) {
          // create new entry
          me.getLoHistoricalProducts().addToHistory(prdMainPKey, posPKey, clbMetaPKey, me.getBpaMainPKey());

          // update already loadad survey products (store + selected POS)

          var aStorePOS = me.getLoPOS().getItemsByParamArray([{ "posId" : " ", "op" : "EQ" }]);
          if (aStorePOS.length > 0) {
            var aStoreJobProduct = aStorePOS[0].getSurveyProducts().getItemsByParamArray([
              { 
                "prdMainPKey" : prdMainPKey,
                "op" : "EQ"
              }, {
                "posId" : " ",
                "op" : "EQ"
              }
            ], []);

            if (aStoreJobProduct.length > 0) {
              aStoreJobProduct[0].setHistorical("1");
            }
          }

          aCurrentPOSProduct = me.getLoCurrentSurveyProducts().getItemsByParamArray([
            {
              "prdMainPKey" : prdMainPKey,
              "op" : "EQ"
            }
          ], []);

          if (aCurrentPOSProduct.length > 0) {
            aCurrentPOSProduct[0].setHistorical("1");
          }
        }

        break;

      case "delete":
        if (posId === " ") {
          // delete from store & POS
          me.getLoHistoricalProducts().deleteFromHistory(prdMainPKey, " ", clbMetaPKey, me.getBpaMainPKey());

          // update already loadad survey products (all of same product, independent of POS)
          var aPOS = me.getLoPOS().getAllItems();
          var idxPos;
          var aJobProductOfPOS;

          for (idxPos = 0; idxPos < aPOS.length; idxPos++) {
            if (aPOS[idxPos].getProductsInitialized() == "1") {
              var id = aPOS[idxPos].getPosId();

              aJobProductOfPOS = me.getLoCurrentSurveyProducts().getItemsByParamArray([
                {
                  "prdMainPKey" : prdMainPKey,
                  "op" : "EQ"
                }, {
                  "posId" : id,
                  "op" : "EQ"
                }
              ]);

              if (aJobProductOfPOS.length > 0) {
                aJobProductOfPOS[0].setHistorical("0");
              }
            }
          }

        } else {
          // delete from POS
          me.getLoHistoricalProducts().deleteFromHistory(prdMainPKey, posPKey, clbMetaPKey, me.getBpaMainPKey());

          // update already loadad POS product
          aCurrentPOSProduct = me.getLoCurrentSurveyProducts().getItemsByParamArray([
            {
              "prdMainPKey" : prdMainPKey,
              "op" : "EQ"
            }
          ], []);

          if (aCurrentPOSProduct.length > 0) {
            aCurrentPOSProduct[0].setHistorical("0");
          }
        }

        break;
    }
  }
);]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>