<BusinessLogic methodName="expandJobProducts" businessObjectClass="BoJobManager" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="posIds" type="String" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var deferreds = [];
var i;
var params;
var aPosIds;
var loPos;

// load LoSurveys first to get existing jobs (if not loaded already)
if (!Utils.isDefined(posIds) || posIds === "") {
  loPos = me.getLoPOS().getAllItems();
  for (i = 0; i < loPos.length; i++) {
    params = {
      "posId" : loPos[i].getPosId(),
      "boJobManager" : me,
      "pushToPOSListAfterLoad" : true
    };

    deferreds.push(BoFactory.loadLightweightListAsync("LoSurveys", Utils.convertDsParamsNewToOld(params)));
  }
} else {
  aPosIds = posIds.split(',');
  for (i = 0; i < aPosIds.length; i++) {
    var sPosId = aPosIds[i];
    var exstingPos = me.getLoPOS().getItemsByParam({"posId":sPosId});
    if(exstingPos.length > 0 && exstingPos[0].getProductsInitialized() !== "1"){
      params = {
        "posId" : sPosId,
        "boJobManager" : me,
        "pushToPOSListAfterLoad" : true
      };

      deferreds.push(BoFactory.loadLightweightListAsync("LoSurveys", Utils.convertDsParamsNewToOld(params)));
    }
  }
}

var promise = when.all(deferreds).then(
  function () {
    // then load JobProducts
    var deferreds2 = [];
    if (!Utils.isDefined(posIds) || posIds === "") {
      loPos = me.getLoPOS().getAllItems();

      for (i = 0; i < loPos.length; i++) {
        deferreds2.push(me.getJobProducts(loPos[i].getPosId()));
      }
    } else {
      aPosIds = posIds.split(',');
      for (var k = 0; k < aPosIds.length; k++) {
        deferreds2.push(me.getJobProducts(aPosIds[k]));
      }
    }

    return when.all(deferreds2);
  });]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>