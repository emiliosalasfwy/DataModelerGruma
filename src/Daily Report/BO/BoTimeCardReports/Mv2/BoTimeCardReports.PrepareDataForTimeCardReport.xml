<BusinessLogic methodName="prepareDataForTimeCardReport" businessObjectClass="BoTimeCardReports" businessObjectType="businessobject" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="timeEntryData" type="Object" />
    <MethodInput name="userName" type="String" />
    <MethodInput name="team" type="String" />
    <MethodInput name="startDate" type="String" />
    <MethodInput name="endDate" type="String" />
    <MethodInput name="loActivityItem" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var dateArray = timeEntryData.getAllItems();
var resultRaw = [];
var indices = Utils.createDictionary();
var colors = [];
var legendData = [];
var entryNames = [];
var workingTimeText = "";
var workingTimeIndex = -1;

if(!Utils.isDefined(loActivityItem) || loActivityItem.isDestroyed || !Utils.isDefined(loActivityItem.getAllItems()) || loActivityItem.getAllItems().length === 0) {
  return {  "noDataAvailable" : "1" };
}

var activityItems = loActivityItem.serialize();
var activityIndex = 0;

var activityItemProcessing = function(activityItem) {
  var activityTypeText = activityItem.text;
  var code = activityItem.code;
  var color = activityItem.validationCode;
  var duration = 0;

  indices.add(activityTypeText,resultRaw.length);
  resultRaw.push([activityTypeText, duration]);
  colors.push(color);

  legendData.push({id:activityTypeText, color:color, time:duration, legendEntry: "3"});

  if(code === "WorkingTime") {
    workingTimeIndex = activityIndex;
    workingTimeText = activityTypeText;
  }
  activityIndex++;
};

activityItems.forEach(activityItemProcessing);

var timeEntryProcessing = function(timeEntry) {
  var activityTypeText = Utils.getToggleText("DomUsrActivityType", timeEntry.getActivityType());
  var color = timeEntry.getActivityTypeColor();
  var duration = timeEntry.getDuration();

  if(duration === 0 && timeEntry.getActivityType() === "WorkingTime" && timeEntry.getSystemTimeThru() == Utils.getMinDate()) {
    var dtNow = Utils.createDateNow();
    var dtStart = Utils.convertAnsiDate2Date(timeEntry.getSystemTimeFrom());
    duration = Math.floor((dtNow - dtStart)/1000/60);
  }

  if(duration !== 0) {
    var index = -1;
    if(indices.containsKey(activityTypeText)) {
      index = indices.get(activityTypeText);
    }
    var newDuration = resultRaw[index][1] + duration;
    resultRaw[index][1] =  newDuration;
    legendData[index].time= newDuration;
  }
};

dateArray.forEach(timeEntryProcessing);

if(resultRaw.length !== 0 && workingTimeIndex != -1) {
  var legendtextPre = [];
  var legendtextPost = [];

  if(team == "1") {
    userName = userName + " ("+ (Localization.resolve("Report_TimeCard_Team")) + ")";
  }
  legendtextPre.push({id:userName, legendEntry: "0"});
  legendtextPre.push({id:Utils.convertAnsiDate2Date(startDate).toLocaleDateString() + "  -  " + Utils.convertAnsiDate2Date(endDate).toLocaleDateString(), legendEntry: "1"});
  legendtextPre.push({id:(Localization.resolve("Report_TimeCard_Dist")+":"), legendEntry: "2"});
  legendtextPost.push({id: Localization.resolve("Report_TimeCard_Total"), time: resultRaw[workingTimeIndex][1], legendEntry: "4"});


  var summedUpDuration = 0;
  for(var i = 0; i < resultRaw.length; i++) {
    if(i === workingTimeIndex) {
      continue;
    }
    summedUpDuration+= resultRaw[i][1];
  }

  resultRaw[workingTimeIndex][0] = Localization.resolve("Report_TimeCard_Unspec");
  resultRaw[workingTimeIndex][1] = resultRaw[workingTimeIndex][1] - summedUpDuration;

  legendData[workingTimeIndex].id = resultRaw[workingTimeIndex][0];
  legendData[workingTimeIndex].time = resultRaw[workingTimeIndex][1];

  legendData = legendtextPre.concat(legendData);
  legendData = legendData.concat(legendtextPost);
}

for(var legendIndex = 0; legendIndex < legendData.length; legendIndex++) {
  legendData[legendIndex].index = legendIndex;
}

var jsonData = {
  "noDataAvailable" : "0",
  "data" : {
    columns: resultRaw
  },
  colors:colors,
  legendData:legendData
};]]>
</Code>
  <Return name="jsonData" value="jsonData" />
</BusinessLogic>