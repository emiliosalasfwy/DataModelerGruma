<BusinessLogic methodName="applyChanges" businessObjectClass="LoUsrTimeEntry" businessObjectType="listobject" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="origObject" type="Object" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[//note: origObject is the changed object from the wizard - me.getCurrent() is object which has to be updated in the LO

var modified = false;
var stateNewDirty = STATE.NEW | STATE.DIRTY;

//### changed FromDate
if(me.getCurrent().getEffectiveDateFrom() !== origObject.getEffectiveDateFrom() ||
   me.getCurrent().getEffectiveTimeFrom() !== origObject.getEffectiveTimeFrom() ||
   me.getCurrent().getEffectiveTimeFromGeoOffset() !== origObject.getEffectiveTimeFromGeoOffset() ||
   me.getCurrent().getEffectiveTimeFromDSTOffset() !== origObject.getEffectiveTimeFromDSTOffset()) {

  modified = true;

  me.getCurrent().setEffectiveDateFrom(origObject.getEffectiveDateFrom());
  me.getCurrent().setEffectiveTimeFrom(origObject.getEffectiveTimeFrom());

  //set UTC Date
  var dateFrom = Utils.convertAnsiDate2Date(origObject.getEffectiveDateFrom());
  var timeFrom = Utils.convertAnsiTime2Time(origObject.getEffectiveTimeFrom());

  dateFrom.setHours(timeFrom.getHours());
  dateFrom.setMinutes(timeFrom.getMinutes());
  dateFrom.setSeconds(0);
  dateFrom.setMilliseconds(0);

  //calculate effectiveUTCTimeFrom considering Geo and DST offsets
  me.getCurrent().setEffectiveUTCTimeFrom(ApplicationContext.get("dateTimeHelper").getUTCAnsiString(dateFrom, origObject.getEffectiveTimeFromGeoOffset(), origObject.getEffectiveTimeFromDSTOffset()));

  me.getCurrent().setEffectiveTimeFromGeoOffset(origObject.getEffectiveTimeFromGeoOffset());
  me.getCurrent().setEffectiveTimeFromDSTOffset(origObject.getEffectiveTimeFromDSTOffset());
}

//### changed ThruDate
if(me.getCurrent().getEffectiveDateThru() !== origObject.getEffectiveDateThru() ||
   me.getCurrent().getEffectiveTimeThru() !== origObject.getEffectiveTimeThru() ||
   me.getCurrent().getEffectiveTimeThruGeoOffset() !== origObject.getEffectiveTimeThruGeoOffset() ||
   me.getCurrent().getEffectiveTimeThruDSTOffset() !== origObject.getEffectiveTimeThruDSTOffset()) {

  modified = true;

  me.getCurrent().setEffectiveDateThru(origObject.getEffectiveDateThru());
  me.getCurrent().setEffectiveTimeThru(origObject.getEffectiveTimeThru());

  //set UTC Date
  var dateThru = Utils.convertAnsiDate2Date(origObject.getEffectiveDateThru());
  var timeThru = Utils.convertAnsiTime2Time(origObject.getEffectiveTimeThru());

  dateThru.setHours(timeThru.getHours());
  dateThru.setMinutes(timeThru.getMinutes());
  dateThru.setSeconds(0);
  dateThru.setMilliseconds(0);

  //calculate effectiveUTCTimeFrom considering Geo and DST offsets
  me.getCurrent().setEffectiveUTCTimeThru(ApplicationContext.get("dateTimeHelper").getUTCAnsiString(dateThru, origObject.getEffectiveTimeThruGeoOffset(), origObject.getEffectiveTimeThruDSTOffset()));

  me.getCurrent().setEffectiveTimeThruGeoOffset(origObject.getEffectiveTimeThruGeoOffset());
  me.getCurrent().setEffectiveTimeThruDSTOffset(origObject.getEffectiveTimeThruDSTOffset());
}


//### changed note and reason code
if(me.getCurrent().getNote() !== origObject.getNote() ||
   me.getCurrent().getReasonCode() !== origObject.getReasonCode()) {

  modified = true;

  me.getCurrent().setNote(origObject.getNote());
  me.getCurrent().setReasonCode(origObject.getReasonCode());
}


if(modified){
  //calculate duration
  // User Story: Enhanced TimeCard-- Added check for WorkingTimeentry edit
  if(parseInt(ApplicationContext.get("dateTimeHelper").getDateDiff(me.getCurrent().getEffectiveUTCTimeFrom(), me.getCurrent().getEffectiveUTCTimeThru()), 10)>=0){
    me.getCurrent().setDuration(ApplicationContext.get("dateTimeHelper").getDateDiff(me.getCurrent().getEffectiveUTCTimeFrom(), me.getCurrent().getEffectiveUTCTimeThru()));
  }

  if (me.getCurrent().getManual() !== "1"){
    me.getCurrent().setSignImage("Edited");
  }
  me.getCurrent().setTimeFromThru(me.getCurrent().getEffectiveTimeFrom() + " - " + me.getCurrent().getEffectiveTimeThru());
}

//delete the hidden-helper entry
if (me.getCurrent().getObjectStatus() !== stateNewDirty){
  me.getCurrent().setObjectStatus(STATE.DIRTY | STATE.PERSISTED);
}
var li = me.getItemByPKey(origObject.getPKey());
if(Utils.isDefined(li)){
  li.delete();
}
me.removeItems([origObject.getPKey()]);

//store changes immediately because of recovery mode (message about current situation)
me.saveImmediately();]]>
</Code>
  <Return name="me" value="me" />
</BusinessLogic>