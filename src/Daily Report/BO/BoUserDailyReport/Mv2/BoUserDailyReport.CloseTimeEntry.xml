<BusinessLogic methodName="closeTimeEntry" businessObjectClass="BoUserDailyReport" businessObjectType="businessobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="timeEntryPKey" type="String" />
    <MethodInput name="saveImmediately" type="Boolean" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var dateTimeHelper = ApplicationContext.get("dateTimeHelper");
var promise;

if(!Utils.isDefined(saveImmediately)) {
  saveImmediately = true;
}

if (!Utils.isDefined(me.getLoUsrTimeEntry()) || (Utils.isDefined(me.getLoUsrTimeEntry()) && me.getLoUsrTimeEntry().getItemObjects().length === 0)) {
  promise = BoFactory.loadListAsync(LO_USRTIMEENTRY, me.getQueryBy("UsrDailyReportPKey", me.getPKey())).then(
    function (result) {
      me.setLoUsrTimeEntry(result);
    }
  );
}
else {
  promise = when.resolve();
}

var promise = promise.then(
  function() {
    if (Utils.isDefined(me.getLoUsrTimeEntry())) {
      var li = me.getLoUsrTimeEntry().getItemByPKey(timeEntryPKey);

      if (Utils.isDefined(li)) {
        li.beginEdit();

        //calculate end date and time
        var now = Utils.createDateNow();
        var hours = now.getHours() > 9 ? now.getHours() : "0" + now.getHours();
        var minutes = now.getMinutes() > 9 ? now.getMinutes() : "0" + now.getMinutes();
        var time = hours + ":" + minutes;

        var nowWithoutTime = Utils.createDateByMilliSec(now.getTime());
        nowWithoutTime.setHours(0);
        nowWithoutTime.setMinutes(0);
        nowWithoutTime.setSeconds(0);

        li.setEffectiveDateThru(Utils.convertFullDate2Ansi(nowWithoutTime));
        li.setEffectiveTimeThru(time);
        li.setSystemTimeThru(Utils.convertFullDate2Ansi(now));
        li.setTimeFromThru(li.getEffectiveTimeFrom() + " - " + time);

        //set geo and dst offsets for EffectiveTimeThru and SystemTimeThru
        var offsets = dateTimeHelper.getTimeZoneOffset(now);
        if(Utils.isDefined(offsets)) {
          li.setEffectiveTimeThruGeoOffset(offsets.geoOffset);
          li.setEffectiveTimeThruDSTOffset(offsets.dstOffset);
          li.setSystemTimeThruGeoOffset(offsets.geoOffset);
          li.setSystemTimeThruDSTOffset(offsets.dstOffset);
        }

        // UTC Time (effectiveUTCTimeThru)
        var effectiveUTCTimeThru = dateTimeHelper.getUTCAnsiString(now, li.getSystemTimeThruGeoOffset(), li.getSystemTimeThruDSTOffset());

        if(Utils.isDefined(effectiveUTCTimeThru)) {
          li.setEffectiveUTCTimeThru(effectiveUTCTimeThru);
        }

        //calculate duration of timeEntry
        var dateDiffMins = dateTimeHelper.getDateDiff(li.getEffectiveUTCTimeFrom(), li.getEffectiveUTCTimeThru());

        li.setDuration(parseInt(dateDiffMins, 10));
        li.endEdit();

        //check if there already exist timer with current activity type
        var availableTimer = TM.getAllTimers(li.getActivityType());

        if (availableTimer.length > 0) {
          //stop available timer
          for (var idxTimer = 0; idxTimer < availableTimer.length; idxTimer++) {
            TM.stopTimer(availableTimer[idxTimer].getTimerId());
          }
        }

        //Calculate Time entry Duration
        me.calculateTotalActivityDuration();

        //Set State
        var stateNewDirty = STATE.NEW | STATE.DIRTY;
        if (me.getObjectStatus() !== stateNewDirty) {
          me.setObjectStatus(STATE.DIRTY);
        }

        if(me.getObjectStatus() !== stateNewDirty && saveImmediately) {
          return me.getLoUsrTimeEntry().saveImmediately().then(
            function () {
              return li.getPKey();
            }
          );
        }
      }
    }
  }
);]]>
</Code>
  <Return name="promise" value="promise" />
</BusinessLogic>