<BusinessLogic methodName="beforeCreateAsync" businessObjectClass="BoTodo" businessObjectType="" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="context" type="Object" />
  </Parameters>
  <Code language="JavaScript"><![CDATA[var jParams;
var jQuery;
var pKey = PKey.next();
var user = ApplicationContext.get("user");
me.setPKey(pKey);
me.updateProperties(context.jsonQuery);
me.setInitiationDate(Utils.createAnsiDateToday());
me.setInitiatorPKey(user.getPKey());
me.setResponsiblePKey(user.getPKey());
me.setSalesOrg(user.getBoUserSales().getSalesOrg());
me.setPriority("B");
me.setClassification("Inquiry");
me.setIssuePhase("initial");

var recordTypeHelper = function () {
  if (Utils.isSfBackend()) {
    var jsonParams = {
      recordType: "User_Task",
    };
    return Facade.selectSQL("DsLuRecordType", "UserTask", jsonParams);
  }
  return when.resolve();
};

var promise = recordTypeHelper()
.then(function (recordType) {
  jParams = [];
  jQuery = {};
  if (Utils.isDefined(recordType) && recordType.length > 0) {
    me.setSvcRequestMetaPKey(recordType[0].pKey);
  }
  jParams.push({
    field: "svcTodoPKey",
    value: me.getPKey(),
  });
  jQuery.params = jParams;
  return BoFactory.createObjectAsync("BoTodoNote", jQuery);
})
.then(function (object) {
  // Assign loaded meta business object to BoTodo
  me.setBoTodoNote(object);
  me.getBoTodoNote().setObjectStatus(STATE.NEW | STATE.DIRTY);
  return BoFactory.loadObjectByParamsAsync(
    "BoSvcRequestMeta",
    Utils.getParamsForDeprecatedDS("pKey", me.getSvcRequestMetaPKey())
  );
})
.then(function (object) {
  // Assign loaded meta business object to BoTodo
  me.setBoSvcRequestMeta(object);
  me.setMetaType(me.getBoSvcRequestMeta().getMetaType());
  if (me.getBoSvcRequestMeta().getIsPrivate() != "0") {
    me.setOwnerPKey(user.getPKey());
  }
  var jsonParams = me.prepareLookupsLoadParams(me);
  return me.loadLookupsAsync(jsonParams);
})
.then(function (lookups) {
  me.assignLookups(lookups);
  if (Utils.isSfBackend()) {
    return when.resolve();
  } else {
    return SysNumber.getSysNumberAsync(
      me.getBoSvcRequestMeta().getSysNumberPKey()
    );
  }
})
.then(function (sysnumber) {
  //Set id (generated by number generator)
  var sysnumberPkey = me.getBoSvcRequestMeta().getSysNumberPKey();
  //In case, SysNumberPKey of Meta is empty - ID is set by PKey
  if (Utils.isEmptyString(sysnumberPkey)) {
    me.setTodoId(me.getPKey());
  } else {
    me.setTodoId(sysnumber);
  }
  // Prepopulate values of simple properties in BoTodo that come from the template (meta)
  me.setWfeWorkflowPKey(me.getBoSvcRequestMeta().getWfeWorkflowPKey());
  return BoFactory.loadObjectByParamsAsync(
    "BoWorkflow",
    Utils.getParamsForDeprecatedDS("pKey", me.getWfeWorkflowPKey())
  );
})
.then(function (boWorkflow) {
  me.setBoWorkflow(boWorkflow);
  return BoFactory.loadObjectByParamsAsync(
    "LuInitialAndNextState",
    Utils.getParamsForDeprecatedDS("wfeWorkflowPKey", me.getWfeWorkflowPKey())
  );
})
.then(function (luInitialAndNextState) {
  if (!Utils.isSfBackend()) {
    me.setActualStatePKey(luInitialAndNextState.getInitialStatePKey());
    me.setIssuePhase(luInitialAndNextState.getInitialStateType());
    me.setNextStatePKey(luInitialAndNextState.getInitialStatePKey());
  }
  return BoFactory.createObjectAsync("LoTodoRecentState", {});
})
.then(function (loTodoRecentState) {
  me.setLoRecentState(loTodoRecentState);
  return BoFactory.createObjectAsync("LoTodoAttachments", {});
})
.then(function (loTodoAttachments) {
  me.setLoTodoAttachments(loTodoAttachments);
  return BoFactory.createObjectAsync("LoAtmAttachment", {});
})
.then(function (loAtmAttachment) {
  me.setLoAtmAttachment(loAtmAttachment);
  //Set State
  me.setObjectStatus(STATE.NEW | STATE.DIRTY);
  //Set edit and access rights
  me.setEARights();
});]]></Code>
  <Return name="context" value="promise" />
</BusinessLogic>