<BusinessLogic methodName="addItem" businessObjectClass="LoTruckLoadItems" businessObjectType="listobject" asynchronous="true" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="ProductPKey" type="DomPKey" />
    <MethodInput name="SdoMainPKey" type="DomPKey" />
    <MethodInput name="itemTemplate" type="LiOrderItemMeta" />
    <MethodInput name="barcodeScanBehavior" type="DomSdoBarcodeScanBehavior" />
    <MethodInput name="scanIncrementQuantity" type="DomInteger" />
    <MethodInput name="mode" type="String" />
    <MethodInput name="uoM" type="DomPrdLogisticUnit" />
    <MethodInput name="documentTemplate" type="BoOrderMeta" />
    <MethodInput name="documentType" type="DomSdoSubType" />
    <MethodInput name="phase" type="DomSdoPhase" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var jsonQuery_productInformation = {};
jsonQuery_productInformation.params = [{ "field": "prdMainPKey", "value": ProductPKey }];
var productInformationLookup;

var promise = Facade.getObjectAsync("LuProductUom", jsonQuery_productInformation).then(
  function (lookupData) {
    // Instantiate lookup from lookup data
    productInformationLookup = BoFactory.instantiate("LuProductUom", lookupData);

    if (!Utils.isDefined(uoM) || Utils.isEmptyString(uoM)) {
      // Set unit information depending on default unit
      if (itemTemplate.getQuantityLogisticUnit() == "OrderUnit") {
        uoM = productInformationLookup.getOrderQuantityLogisticUnit();
      }
      else if (itemTemplate.getQuantityLogisticUnit() == "ConsumerUnit") {
        uoM = productInformationLookup.getConsumerQuantityLogisticUnit();
      }
      else if (itemTemplate.getQuantityLogisticUnit() == "PriceUnit") {
        uoM = productInformationLookup.getPriceQuantityLogisticUnit();
      }
      else {
        uoM = productInformationLookup.getOrderQuantityLogisticUnit();
      }
    }

    return BoFactory.loadObjectByParamsAsync("LuProduct", me.getQueryBy("pKey", ProductPKey));
  }).then(
  function (lookupData) {
    var existingItems = me.getItemsByParam({
      "prdMainPKey": ProductPKey,
      "sdoItemMetaPKey": itemTemplate.getPKey(),
      "quantityLogisticUnit": uoM
    });

    var result = {};
    var buttonValues = {};

    //Check if there exists an item with the same ProductPKey
    if (existingItems.length === 0) {
      if (itemTemplate.getAddAllowed() === '0' || (phase === "Released" || phase === "Canceled")) {
        buttonValues[Localization.resolve("OK")] = "ok";

        return Framework.displayMessage(Localization.resolve("MessageBox_Title_Warning"), Localization.resolve("AddNotAllowedMessage"), buttonValues).then(
          function () {
            return result;
          }
        );
      } else {
        var PrdText = "";
        var PrdId = "";
        if (Utils.isDefined(lookupData)) {
          PrdText = lookupData.getText1();
          PrdId = lookupData.getPrdId();
        }

        if (itemTemplate.getShortText() === "Prd Out") {
          itemTemplate.setShortText("");
        }

        var li = {
          "pKey": PKey.next(),
          "sdoMainPKey": SdoMainPKey,
          "prdMainPKey": ProductPKey,
          "quantityLogisticUnit": uoM,
          "isOrderUnit": "1",
          "text1": PrdText,
          "prdId": PrdId,
          "sdoItemMetaPKey": itemTemplate.getPKey(),
          "quantity": "0",
          "suggestedQuantity": 0,
          "targetQuantity": "0",
          "saveZeroQuantity": itemTemplate.getSaveZeroQuantity(),
          "edited": "0",
          "refPKey": SdoMainPKey + ProductPKey + itemTemplate.getPKey(),
          "shortText": itemTemplate.getShortText(),
          "objectStatus": STATE.NEW
        };

        me.addListItems([li]);

        return me.addMissingUoMsToItem(li, itemTemplate, "").then(
          function () {
            // Hide the Type selection box
            if (documentType === "ProductCheckOut") {
              li.getACL().removeRight(AclObjectType.PROPERTY, "sdoItemMetaPKey", AclPermission.VISIBLE);
            }

            if (Utils.isDefined(documentTemplate) &&
                (documentTemplate.getConsiderQuantitySuggestion() !== "No" || documentTemplate.getItemPresettingPolicy() === "Prepopulated")) {
              var unitOfMeasureItems = me.getUnitOfMeasureItemsForMainItem(li);

              for (var x = 0; x < unitOfMeasureItems.length; x++) {
                unitOfMeasureItems[x].setQtyDifference(unitOfMeasureItems[x].getQuantity() - unitOfMeasureItems[x].getTargetQuantity());
                unitOfMeasureItems[x].setOqtyInfo(Localization.resolve("oQtyId") + "  " + unitOfMeasureItems[x].getTargetQuantity());
                unitOfMeasureItems[x].setDifferenceInfo(Localization.resolve("DifferenceId") + "  " + unitOfMeasureItems[x].getQtyDifference());
              }
            }

            result.selectPKey = li.getPKey();
            result.countExistingItems = existingItems;

            if (Utils.isDefined(documentTemplate) && documentTemplate.getItemPresettingPolicy() === "BlindMode") {
              li.setEdited("1");
              var filterPrdMainPKey = me.getAllItems().filter(function (x){
                if (x.getPrdMainPKey() == li.prdMainPKey){
                  return x;
                }
              });
              for (var i = 0; i < filterPrdMainPKey.length; i++) {
                filterPrdMainPKey[i].setEdited("1");
              }
              me.resetFilter("edited");
              me.setFilter("edited", "1", "EQ");
            }

            // Call function to increment quantity (initially) if product is added via scanning
            if ((mode === "addScannedProduct") && ((barcodeScanBehavior === "SelectIncrease") || (barcodeScanBehavior === "UserExit"))) {
              me.incrementQuantityByScan(li, itemTemplate, barcodeScanBehavior, scanIncrementQuantity);
              li.setQuantity(li.getQuantity());
            }

            return result;
          });
      }
    } else if ((Utils.isDefined(documentType) && documentType === "TruckIvcTransferInward" && itemTemplate.getAddAllowed() == '0') || (phase === "Released" || phase === "Canceled")) {
      buttonValues[Localization.resolve("OK")] = "ok";

      return Framework.displayMessage(Localization.resolve("MessageBox_Title_Warning"), Localization.resolve("AddNotAllowedMessage"), buttonValues).then(
        function () {
          return result;
        });
    } else {
      var mainItem = existingItems[0];
      if (Utils.isDefined(documentTemplate) && documentTemplate.getItemPresettingPolicy() === "BlindMode") {
        mainItem.setEdited("1");
      }

      // Increase quantity by scan increment if product is selected via scanning
      if (mode === "addScannedProduct" && ((barcodeScanBehavior === "SelectIncrease") || (barcodeScanBehavior === "UserExit"))) {
        me.incrementQuantityByScan(mainItem, itemTemplate, barcodeScanBehavior, scanIncrementQuantity);
      }

      var resultValue = {};
      resultValue.selectPKey = mainItem.getPKey();
      resultValue.countExistingItems = existingItems;
      return resultValue;
    }
  });]]>
</Code>
  <Return name="addItemResult" value="promise" />
</BusinessLogic>