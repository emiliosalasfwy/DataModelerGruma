<BusinessLogic methodName="validateProductUniqueness" businessObjectClass="BoTruckLoad" businessObjectType="businessobject" asynchronous="false" accessibility="PUBLIC" final="false" module="CORE" simpleEditorOnly="">
  <Parameters>
    <MethodInput name="messageCollector" type="messageCollector" />
  </Parameters>
<Code language="JavaScript">
<![CDATA[var nonEditableOrIgnoreRelease = (!me.isEditable() || me.getReleaseIgnored() == "1");

if (!nonEditableOrIgnoreRelease && me.getValidateForUniqueness() !== "1"){

  if(me.getReleaseTriggered() !== "1"){
    if(messageCollector.onCancel !== "setValidateForQuantityFlag"){
      return;
    }
  }

  // Get all item templates and store meta information in a dictionary
  var itemMetas = me.getBoOrderMeta().getItemMetaJsonDictionary();
  // Get all order items
  var items = me.getLoItems().getAllItems();
  var notUniqueItems = Utils.createDictionary();
  var checkForUniqueItems = "0";
  var loItems = me.getLoItems();

  // Loop over items and validate according to current template
  for (var j = 0; j < items.length; j++) {
    var item = items[j];
    var sdoItemMetaPKey = item.getSdoItemMetaPKey();
    var prdMainPKey = item.getPrdMainPKey();
    var quantityLogisticUnit= item.getQuantityLogisticUnit();
    var quantity = item.getQuantity();
    var targetQuantity =  item.getTargetQuantity();
    var objectStatus = item.getObjectStatus();
    var itemMeta = itemMetas.get(sdoItemMetaPKey);

    if (itemMeta.checkUniqueness == "1"){
      if(itemMeta.saveZeroQuantity == '1'){
        checkForUniqueItems = "1";
      }
      else if(itemMeta.saveZeroQuantity == '0'){
        if(quantity !== 0 && targetQuantity !== 0){
          checkForUniqueItems = "1";
        }
        else{
          checkForUniqueItems = "0";
        }
      }
      if(checkForUniqueItems == "1"){
        var uniquenessKey = prdMainPKey + "_" + sdoItemMetaPKey + "_" + quantityLogisticUnit;
        var stateDirty = STATE.DIRTY | STATE.PERSISTED;
        var stateNewDirty = STATE.NEW | STATE.DIRTY;
        //Check for numer of items with that key in the list of items
        var findItem = loItems.getItemsByParam({ "prdMainPKey": prdMainPKey, "sdoItemMetaPKey": sdoItemMetaPKey, "quantityLogisticUnit": quantityLogisticUnit });
        if (objectStatus == stateNewDirty || objectStatus == stateDirty) {

          // Check if current item has already been checked for uniqueness (in case of we reach the duplicate)
          if (notUniqueItems.containsKey(uniquenessKey) === false) {

            if (findItem.length > 1) {
              notUniqueItems.add(uniquenessKey, uniquenessKey);
              var newError = {
                "level": "error",
                "objectClass": "BoTruckLoad",
                "messageID": "CasSdoMainProductItemMetaAndUnitNotUnique",
                "messageParams": { "summary": item.getText1() }
              };

              messageCollector = me.addMessageToContainer(messageCollector, newError);
              me.setValidateForQuantity("1");
            }
          }
        }
      }
    }
  }
}]]>
</Code>
  <Return name="" value="" />
</BusinessLogic>